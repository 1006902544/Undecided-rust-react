/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * actic_web_app_project
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  AuthLimitRes,
  GetAuthLimitParams,
  AdminInfoRes,
  ResPonseString,
  LoginBody,
  SpuRes,
  GetSpuLimitParams,
  UpdateSpuReq,
  DeleteSpuParams,
  SpuDetailRes,
  GetSpuDetailParams,
  CompanyStudioRes,
  GetCompanyParams,
  UpdateCompanyStudioReq,
  DeleteCompanyStudioParams,
  CompanyStudioDetailRes,
  GetCompanyDetailParams,
  ListRes,
  GameTagsRes,
  GetTagsLimitParams,
  ResPonseU8,
  UpdateTagReq,
  DeleteTagsParams,
  GameTypeRes,
  GetGameTypesParams,
  UpdateGameTypeReq,
  DeleteGameTypeParams,
  MaterialImageRes,
  GetImagesParams,
  UpdateImageObjectReq,
  DeleteImageParams,
  BatchDeleteMaterialImagesReq,
  PermissionLimitRes,
  GetPermissionParams,
  UpdatePermissionBody,
  DeletePermissionParams,
  PermissionAssociateAuthReqBody,
  DisassociateParams,
  PermissionAssociateAuthLimitRes,
  GetPermissionAuthParams,
  RoutesVecRes,
  UpdateRouteReq,
  DeleteRouterParams,
  AssociateRouterAuthReq,
  RouterAssociateAuthLimitRes,
  GetAuthWithRouterParams,
  AccessKeyRes
} from './schema'
import { custom_instance } from './custom_instance';
import type { ErrorType } from './custom_instance';



// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * auth limit
 * @summary auth limit
 */
export const getAuthLimit = (
    params?: GetAuthLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<AuthLimitRes>(
      {url: `/manager/auth`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetAuthLimitQueryKey = (params?: GetAuthLimitParams,) => [`/manager/auth`, ...(params ? [params]: [])] as const;
  

    
export const getGetAuthLimitQueryOptions = <TData = Awaited<ReturnType<typeof getAuthLimit>>, TError = ErrorType<unknown>>(params?: GetAuthLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getAuthLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthLimit>>> = ({ signal }) => getAuthLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAuthLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthLimit>>>
export type GetAuthLimitQueryError = ErrorType<unknown>

/**
 * @summary auth limit
 */
export const useGetAuthLimit = <TData = Awaited<ReturnType<typeof getAuthLimit>>, TError = ErrorType<unknown>>(
 params?: GetAuthLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const getAdminInfo = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<AdminInfoRes>(
      {url: `/manager/auth/info`, method: 'get', signal
    },
      options);
    }
  

export const getGetAdminInfoQueryKey = () => [`/manager/auth/info`] as const;
  

    
export const getGetAdminInfoQueryOptions = <TData = Awaited<ReturnType<typeof getAdminInfo>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminInfo>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getAdminInfo>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminInfoQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminInfo>>> = ({ signal }) => getAdminInfo(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAdminInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminInfo>>>
export type GetAdminInfoQueryError = ErrorType<unknown>

export const useGetAdminInfo = <TData = Awaited<ReturnType<typeof getAdminInfo>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminInfo>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * sign in
 * @summary sign in
 */
export const signIn = (
    loginBody: LoginBody,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/auth/signIn`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: loginBody
    },
      options);
    }
  


export const getSignInMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: LoginBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: LoginBody}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signIn>>, {data: LoginBody}> = (props) => {
          const {data} = props ?? {};

          return  signIn(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type SignInMutationResult = NonNullable<Awaited<ReturnType<typeof signIn>>>
    export type SignInMutationBody = LoginBody
    export type SignInMutationError = ErrorType<unknown>

    /**
 * @summary sign in
 */
export const useSignIn = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: LoginBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getSignInMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get SPU limit
 * @summary get SPU limit
 */
export const getSpuLimit = (
    params?: GetSpuLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<SpuRes>(
      {url: `/manager/gamesCenter/gamesManagement/spu`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetSpuLimitQueryKey = (params?: GetSpuLimitParams,) => [`/manager/gamesCenter/gamesManagement/spu`, ...(params ? [params]: [])] as const;
  

    
export const getGetSpuLimitQueryOptions = <TData = Awaited<ReturnType<typeof getSpuLimit>>, TError = ErrorType<unknown>>(params?: GetSpuLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getSpuLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSpuLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSpuLimit>>> = ({ signal }) => getSpuLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSpuLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getSpuLimit>>>
export type GetSpuLimitQueryError = ErrorType<unknown>

/**
 * @summary get SPU limit
 */
export const useGetSpuLimit = <TData = Awaited<ReturnType<typeof getSpuLimit>>, TError = ErrorType<unknown>>(
 params?: GetSpuLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSpuLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update SPU
 * @summary update SPU
 */
export const updateSpu = (
    updateSpuReq: UpdateSpuReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/gamesManagement/spu`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateSpuReq
    },
      options);
    }
  


export const getUpdateSpuMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSpu>>, TError,{data: UpdateSpuReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateSpu>>, TError,{data: UpdateSpuReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSpu>>, {data: UpdateSpuReq}> = (props) => {
          const {data} = props ?? {};

          return  updateSpu(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateSpuMutationResult = NonNullable<Awaited<ReturnType<typeof updateSpu>>>
    export type UpdateSpuMutationBody = UpdateSpuReq
    export type UpdateSpuMutationError = ErrorType<unknown>

    /**
 * @summary update SPU
 */
export const useUpdateSpu = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSpu>>, TError,{data: UpdateSpuReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateSpuMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete SPU
 * @summary delete SPU
 */
export const deleteSpu = (
    params: DeleteSpuParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/gamesManagement/spu`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteSpuMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSpu>>, TError,{params: DeleteSpuParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSpu>>, TError,{params: DeleteSpuParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSpu>>, {params: DeleteSpuParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteSpu(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteSpuMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSpu>>>
    
    export type DeleteSpuMutationError = ErrorType<unknown>

    /**
 * @summary delete SPU
 */
export const useDeleteSpu = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSpu>>, TError,{params: DeleteSpuParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteSpuMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get SPU detail
 * @summary get SPU detail
 */
export const getSpuDetail = (
    params: GetSpuDetailParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<SpuDetailRes>(
      {url: `/manager/gamesCenter/gamesManagement/spu/detail`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetSpuDetailQueryKey = (params: GetSpuDetailParams,) => [`/manager/gamesCenter/gamesManagement/spu/detail`, ...(params ? [params]: [])] as const;
  

    
export const getGetSpuDetailQueryOptions = <TData = Awaited<ReturnType<typeof getSpuDetail>>, TError = ErrorType<unknown>>(params: GetSpuDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getSpuDetail>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSpuDetailQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSpuDetail>>> = ({ signal }) => getSpuDetail(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSpuDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getSpuDetail>>>
export type GetSpuDetailQueryError = ErrorType<unknown>

/**
 * @summary get SPU detail
 */
export const useGetSpuDetail = <TData = Awaited<ReturnType<typeof getSpuDetail>>, TError = ErrorType<unknown>>(
 params: GetSpuDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSpuDetailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get company/studio
 * @summary get company/studio
 */
export const getCompany = (
    params?: GetCompanyParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<CompanyStudioRes>(
      {url: `/manager/gamesCenter/general/companyStudio`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetCompanyQueryKey = (params?: GetCompanyParams,) => [`/manager/gamesCenter/general/companyStudio`, ...(params ? [params]: [])] as const;
  

    
export const getGetCompanyQueryOptions = <TData = Awaited<ReturnType<typeof getCompany>>, TError = ErrorType<unknown>>(params?: GetCompanyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompany>>> = ({ signal }) => getCompany(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCompanyQueryResult = NonNullable<Awaited<ReturnType<typeof getCompany>>>
export type GetCompanyQueryError = ErrorType<unknown>

/**
 * @summary get company/studio
 */
export const useGetCompany = <TData = Awaited<ReturnType<typeof getCompany>>, TError = ErrorType<unknown>>(
 params?: GetCompanyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCompanyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update company/studio
 * @summary update company/studio
 */
export const updateCompany = (
    updateCompanyStudioReq: UpdateCompanyStudioReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/general/companyStudio`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateCompanyStudioReq
    },
      options);
    }
  


export const getUpdateCompanyMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCompany>>, TError,{data: UpdateCompanyStudioReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCompany>>, TError,{data: UpdateCompanyStudioReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCompany>>, {data: UpdateCompanyStudioReq}> = (props) => {
          const {data} = props ?? {};

          return  updateCompany(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateCompanyMutationResult = NonNullable<Awaited<ReturnType<typeof updateCompany>>>
    export type UpdateCompanyMutationBody = UpdateCompanyStudioReq
    export type UpdateCompanyMutationError = ErrorType<unknown>

    /**
 * @summary update company/studio
 */
export const useUpdateCompany = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCompany>>, TError,{data: UpdateCompanyStudioReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateCompanyMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete company/studio
 * @summary delete company/studio
 */
export const deleteCompanyStudio = (
    params: DeleteCompanyStudioParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/general/companyStudio`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteCompanyStudioMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCompanyStudio>>, TError,{params: DeleteCompanyStudioParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCompanyStudio>>, TError,{params: DeleteCompanyStudioParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCompanyStudio>>, {params: DeleteCompanyStudioParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteCompanyStudio(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteCompanyStudioMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCompanyStudio>>>
    
    export type DeleteCompanyStudioMutationError = ErrorType<unknown>

    /**
 * @summary delete company/studio
 */
export const useDeleteCompanyStudio = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCompanyStudio>>, TError,{params: DeleteCompanyStudioParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteCompanyStudioMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get company/studio detail
 * @summary get company/studio detail
 */
export const getCompanyDetail = (
    params: GetCompanyDetailParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<CompanyStudioDetailRes>(
      {url: `/manager/gamesCenter/general/companyStudio/detail`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetCompanyDetailQueryKey = (params: GetCompanyDetailParams,) => [`/manager/gamesCenter/general/companyStudio/detail`, ...(params ? [params]: [])] as const;
  

    
export const getGetCompanyDetailQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyDetail>>, TError = ErrorType<unknown>>(params: GetCompanyDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompanyDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCompanyDetail>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyDetailQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyDetail>>> = ({ signal }) => getCompanyDetail(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCompanyDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyDetail>>>
export type GetCompanyDetailQueryError = ErrorType<unknown>

/**
 * @summary get company/studio detail
 */
export const useGetCompanyDetail = <TData = Awaited<ReturnType<typeof getCompanyDetail>>, TError = ErrorType<unknown>>(
 params: GetCompanyDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompanyDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCompanyDetailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get company list
 * @summary get company list
 */
export const getCompanyList = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ListRes>(
      {url: `/manager/gamesCenter/general/companyStudio/list`, method: 'get', signal
    },
      options);
    }
  

export const getGetCompanyListQueryKey = () => [`/manager/gamesCenter/general/companyStudio/list`] as const;
  

    
export const getGetCompanyListQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyList>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompanyList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCompanyList>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyListQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyList>>> = ({ signal }) => getCompanyList(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCompanyListQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyList>>>
export type GetCompanyListQueryError = ErrorType<unknown>

/**
 * @summary get company list
 */
export const useGetCompanyList = <TData = Awaited<ReturnType<typeof getCompanyList>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompanyList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCompanyListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get tags limit
 * @summary get tags limit
 */
export const getTagsLimit = (
    params?: GetTagsLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<GameTagsRes>(
      {url: `/manager/gamesCenter/general/tags`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetTagsLimitQueryKey = (params?: GetTagsLimitParams,) => [`/manager/gamesCenter/general/tags`, ...(params ? [params]: [])] as const;
  

    
export const getGetTagsLimitQueryOptions = <TData = Awaited<ReturnType<typeof getTagsLimit>>, TError = ErrorType<unknown>>(params?: GetTagsLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getTagsLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsLimit>>> = ({ signal }) => getTagsLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetTagsLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getTagsLimit>>>
export type GetTagsLimitQueryError = ErrorType<unknown>

/**
 * @summary get tags limit
 */
export const useGetTagsLimit = <TData = Awaited<ReturnType<typeof getTagsLimit>>, TError = ErrorType<unknown>>(
 params?: GetTagsLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTagsLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update tags
 * @summary update tags
 */
export const updateTags = (
    updateTagReq: UpdateTagReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/gamesCenter/general/tags`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateTagReq
    },
      options);
    }
  


export const getUpdateTagsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTags>>, TError,{data: UpdateTagReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateTags>>, TError,{data: UpdateTagReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTags>>, {data: UpdateTagReq}> = (props) => {
          const {data} = props ?? {};

          return  updateTags(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateTagsMutationResult = NonNullable<Awaited<ReturnType<typeof updateTags>>>
    export type UpdateTagsMutationBody = UpdateTagReq
    export type UpdateTagsMutationError = ErrorType<unknown>

    /**
 * @summary update tags
 */
export const useUpdateTags = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTags>>, TError,{data: UpdateTagReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateTagsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete tags
 * @summary delete tags
 */
export const deleteTags = (
    params: DeleteTagsParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/gamesCenter/general/tags`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteTagsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTags>>, TError,{params: DeleteTagsParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTags>>, TError,{params: DeleteTagsParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTags>>, {params: DeleteTagsParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteTags(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteTagsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTags>>>
    
    export type DeleteTagsMutationError = ErrorType<unknown>

    /**
 * @summary delete tags
 */
export const useDeleteTags = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTags>>, TError,{params: DeleteTagsParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteTagsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get tags list
 * @summary get tags list
 */
export const getTagsList = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ListRes>(
      {url: `/manager/gamesCenter/general/tags/list`, method: 'get', signal
    },
      options);
    }
  

export const getGetTagsListQueryKey = () => [`/manager/gamesCenter/general/tags/list`] as const;
  

    
export const getGetTagsListQueryOptions = <TData = Awaited<ReturnType<typeof getTagsList>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getTagsList>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsListQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsList>>> = ({ signal }) => getTagsList(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetTagsListQueryResult = NonNullable<Awaited<ReturnType<typeof getTagsList>>>
export type GetTagsListQueryError = ErrorType<unknown>

/**
 * @summary get tags list
 */
export const useGetTagsList = <TData = Awaited<ReturnType<typeof getTagsList>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTagsListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get game types limit
 * @summary get game types limit
 */
export const getGameTypes = (
    params?: GetGameTypesParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<GameTypeRes>(
      {url: `/manager/gamesCenter/general/types`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetGameTypesQueryKey = (params?: GetGameTypesParams,) => [`/manager/gamesCenter/general/types`, ...(params ? [params]: [])] as const;
  

    
export const getGetGameTypesQueryOptions = <TData = Awaited<ReturnType<typeof getGameTypes>>, TError = ErrorType<unknown>>(params?: GetGameTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGameTypes>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getGameTypes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGameTypesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGameTypes>>> = ({ signal }) => getGameTypes(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetGameTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getGameTypes>>>
export type GetGameTypesQueryError = ErrorType<unknown>

/**
 * @summary get game types limit
 */
export const useGetGameTypes = <TData = Awaited<ReturnType<typeof getGameTypes>>, TError = ErrorType<unknown>>(
 params?: GetGameTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGameTypes>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetGameTypesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update game types
 * @summary update game types
 */
export const updateGameType = (
    updateGameTypeReq: UpdateGameTypeReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/general/types`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateGameTypeReq
    },
      options);
    }
  


export const getUpdateGameTypeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGameType>>, TError,{data: UpdateGameTypeReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateGameType>>, TError,{data: UpdateGameTypeReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateGameType>>, {data: UpdateGameTypeReq}> = (props) => {
          const {data} = props ?? {};

          return  updateGameType(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateGameTypeMutationResult = NonNullable<Awaited<ReturnType<typeof updateGameType>>>
    export type UpdateGameTypeMutationBody = UpdateGameTypeReq
    export type UpdateGameTypeMutationError = ErrorType<unknown>

    /**
 * @summary update game types
 */
export const useUpdateGameType = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGameType>>, TError,{data: UpdateGameTypeReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateGameTypeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete game type
 * @summary delete game type
 */
export const deleteGameType = (
    params: DeleteGameTypeParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/general/types`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteGameTypeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGameType>>, TError,{params: DeleteGameTypeParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteGameType>>, TError,{params: DeleteGameTypeParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteGameType>>, {params: DeleteGameTypeParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteGameType(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteGameTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGameType>>>
    
    export type DeleteGameTypeMutationError = ErrorType<unknown>

    /**
 * @summary delete game type
 */
export const useDeleteGameType = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGameType>>, TError,{params: DeleteGameTypeParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteGameTypeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get types list
 * @summary get types list
 */
export const getTypesList = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ListRes>(
      {url: `/manager/gamesCenter/general/types/list`, method: 'get', signal
    },
      options);
    }
  

export const getGetTypesListQueryKey = () => [`/manager/gamesCenter/general/types/list`] as const;
  

    
export const getGetTypesListQueryOptions = <TData = Awaited<ReturnType<typeof getTypesList>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTypesList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getTypesList>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTypesListQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTypesList>>> = ({ signal }) => getTypesList(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetTypesListQueryResult = NonNullable<Awaited<ReturnType<typeof getTypesList>>>
export type GetTypesListQueryError = ErrorType<unknown>

/**
 * @summary get types list
 */
export const useGetTypesList = <TData = Awaited<ReturnType<typeof getTypesList>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTypesList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTypesListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get images limit
 * @summary get images limit
 */
export const getImages = (
    params?: GetImagesParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<MaterialImageRes>(
      {url: `/manager/materialLibrary/image`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetImagesQueryKey = (params?: GetImagesParams,) => [`/manager/materialLibrary/image`, ...(params ? [params]: [])] as const;
  

    
export const getGetImagesQueryOptions = <TData = Awaited<ReturnType<typeof getImages>>, TError = ErrorType<unknown>>(params?: GetImagesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetImagesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getImages>>> = ({ signal }) => getImages(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetImagesQueryResult = NonNullable<Awaited<ReturnType<typeof getImages>>>
export type GetImagesQueryError = ErrorType<unknown>

/**
 * @summary get images limit
 */
export const useGetImages = <TData = Awaited<ReturnType<typeof getImages>>, TError = ErrorType<unknown>>(
 params?: GetImagesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetImagesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * create image material
 * @summary create image material
 */
export const createImage = (
    updateImageObjectReq: UpdateImageObjectReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/materialLibrary/image`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateImageObjectReq
    },
      options);
    }
  


export const getCreateImageMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createImage>>, TError,{data: UpdateImageObjectReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof createImage>>, TError,{data: UpdateImageObjectReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createImage>>, {data: UpdateImageObjectReq}> = (props) => {
          const {data} = props ?? {};

          return  createImage(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type CreateImageMutationResult = NonNullable<Awaited<ReturnType<typeof createImage>>>
    export type CreateImageMutationBody = UpdateImageObjectReq
    export type CreateImageMutationError = ErrorType<unknown>

    /**
 * @summary create image material
 */
export const useCreateImage = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createImage>>, TError,{data: UpdateImageObjectReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getCreateImageMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete image material
 * @summary delete image material
 */
export const deleteImage = (
    params: DeleteImageParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/materialLibrary/image`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteImageMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteImage>>, TError,{params: DeleteImageParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteImage>>, TError,{params: DeleteImageParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteImage>>, {params: DeleteImageParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteImage(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteImageMutationResult = NonNullable<Awaited<ReturnType<typeof deleteImage>>>
    
    export type DeleteImageMutationError = ErrorType<unknown>

    /**
 * @summary delete image material
 */
export const useDeleteImage = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteImage>>, TError,{params: DeleteImageParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteImageMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * batch delete images
 * @summary batch delete images
 */
export const batchDeleteImages = (
    batchDeleteMaterialImagesReq: BatchDeleteMaterialImagesReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/materialLibrary/image/batchDelete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: batchDeleteMaterialImagesReq
    },
      options);
    }
  


export const getBatchDeleteImagesMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchDeleteImages>>, TError,{data: BatchDeleteMaterialImagesReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof batchDeleteImages>>, TError,{data: BatchDeleteMaterialImagesReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchDeleteImages>>, {data: BatchDeleteMaterialImagesReq}> = (props) => {
          const {data} = props ?? {};

          return  batchDeleteImages(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type BatchDeleteImagesMutationResult = NonNullable<Awaited<ReturnType<typeof batchDeleteImages>>>
    export type BatchDeleteImagesMutationBody = BatchDeleteMaterialImagesReq
    export type BatchDeleteImagesMutationError = ErrorType<unknown>

    /**
 * @summary batch delete images
 */
export const useBatchDeleteImages = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchDeleteImages>>, TError,{data: BatchDeleteMaterialImagesReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getBatchDeleteImagesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * permission limit
 * @summary permission limit
 */
export const getPermission = (
    params?: GetPermissionParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<PermissionLimitRes>(
      {url: `/manager/permission`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetPermissionQueryKey = (params?: GetPermissionParams,) => [`/manager/permission`, ...(params ? [params]: [])] as const;
  

    
export const getGetPermissionQueryOptions = <TData = Awaited<ReturnType<typeof getPermission>>, TError = ErrorType<unknown>>(params?: GetPermissionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPermission>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getPermission>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPermissionQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermission>>> = ({ signal }) => getPermission(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetPermissionQueryResult = NonNullable<Awaited<ReturnType<typeof getPermission>>>
export type GetPermissionQueryError = ErrorType<unknown>

/**
 * @summary permission limit
 */
export const useGetPermission = <TData = Awaited<ReturnType<typeof getPermission>>, TError = ErrorType<unknown>>(
 params?: GetPermissionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPermission>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPermissionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * permission update
 * @summary permission update
 */
export const updatePermission = (
    updatePermissionBody: UpdatePermissionBody,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/permission`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updatePermissionBody
    },
      options);
    }
  


export const getUpdatePermissionMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePermission>>, TError,{data: UpdatePermissionBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePermission>>, TError,{data: UpdatePermissionBody}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePermission>>, {data: UpdatePermissionBody}> = (props) => {
          const {data} = props ?? {};

          return  updatePermission(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdatePermissionMutationResult = NonNullable<Awaited<ReturnType<typeof updatePermission>>>
    export type UpdatePermissionMutationBody = UpdatePermissionBody
    export type UpdatePermissionMutationError = ErrorType<unknown>

    /**
 * @summary permission update
 */
export const useUpdatePermission = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePermission>>, TError,{data: UpdatePermissionBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdatePermissionMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * permission delete
 * @summary permission delete
 */
export const deletePermission = (
    params: DeletePermissionParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/permission`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeletePermissionMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePermission>>, TError,{params: DeletePermissionParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePermission>>, TError,{params: DeletePermissionParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePermission>>, {params: DeletePermissionParams}> = (props) => {
          const {params} = props ?? {};

          return  deletePermission(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeletePermissionMutationResult = NonNullable<Awaited<ReturnType<typeof deletePermission>>>
    
    export type DeletePermissionMutationError = ErrorType<unknown>

    /**
 * @summary permission delete
 */
export const useDeletePermission = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePermission>>, TError,{params: DeletePermissionParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeletePermissionMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * associate permission to auth
 * @summary associate permission to auth
 */
export const associate = (
    permissionAssociateAuthReqBody: PermissionAssociateAuthReqBody,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/permission/associate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: permissionAssociateAuthReqBody
    },
      options);
    }
  


export const getAssociateMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associate>>, TError,{data: PermissionAssociateAuthReqBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof associate>>, TError,{data: PermissionAssociateAuthReqBody}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof associate>>, {data: PermissionAssociateAuthReqBody}> = (props) => {
          const {data} = props ?? {};

          return  associate(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AssociateMutationResult = NonNullable<Awaited<ReturnType<typeof associate>>>
    export type AssociateMutationBody = PermissionAssociateAuthReqBody
    export type AssociateMutationError = ErrorType<unknown>

    /**
 * @summary associate permission to auth
 */
export const useAssociate = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associate>>, TError,{data: PermissionAssociateAuthReqBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getAssociateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * associate permission to auth
 * @summary associate permission to auth
 */
export const disassociate = (
    params: DisassociateParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/permission/associate`, method: 'delete',
        params
    },
      options);
    }
  


export const getDisassociateMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disassociate>>, TError,{params: DisassociateParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof disassociate>>, TError,{params: DisassociateParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disassociate>>, {params: DisassociateParams}> = (props) => {
          const {params} = props ?? {};

          return  disassociate(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DisassociateMutationResult = NonNullable<Awaited<ReturnType<typeof disassociate>>>
    
    export type DisassociateMutationError = ErrorType<unknown>

    /**
 * @summary associate permission to auth
 */
export const useDisassociate = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disassociate>>, TError,{params: DisassociateParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDisassociateMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get permission auth with whether is associated
 * @summary get permission auth with whether is associated
 */
export const getPermissionAuth = (
    params: GetPermissionAuthParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<PermissionAssociateAuthLimitRes>(
      {url: `/manager/permission/associate/auth`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetPermissionAuthQueryKey = (params: GetPermissionAuthParams,) => [`/manager/permission/associate/auth`, ...(params ? [params]: [])] as const;
  

    
export const getGetPermissionAuthQueryOptions = <TData = Awaited<ReturnType<typeof getPermissionAuth>>, TError = ErrorType<unknown>>(params: GetPermissionAuthParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPermissionAuth>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getPermissionAuth>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPermissionAuthQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermissionAuth>>> = ({ signal }) => getPermissionAuth(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetPermissionAuthQueryResult = NonNullable<Awaited<ReturnType<typeof getPermissionAuth>>>
export type GetPermissionAuthQueryError = ErrorType<unknown>

/**
 * @summary get permission auth with whether is associated
 */
export const useGetPermissionAuth = <TData = Awaited<ReturnType<typeof getPermissionAuth>>, TError = ErrorType<unknown>>(
 params: GetPermissionAuthParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPermissionAuth>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPermissionAuthQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get routes array
 * @summary get routes array
 */
export const getRouter = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<RoutesVecRes>(
      {url: `/manager/router`, method: 'get', signal
    },
      options);
    }
  

export const getGetRouterQueryKey = () => [`/manager/router`] as const;
  

    
export const getGetRouterQueryOptions = <TData = Awaited<ReturnType<typeof getRouter>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getRouter>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouterQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouter>>> = ({ signal }) => getRouter(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetRouterQueryResult = NonNullable<Awaited<ReturnType<typeof getRouter>>>
export type GetRouterQueryError = ErrorType<unknown>

/**
 * @summary get routes array
 */
export const useGetRouter = <TData = Awaited<ReturnType<typeof getRouter>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRouterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update router
 * @summary update router
 */
export const updateRouter = (
    updateRouteReq: UpdateRouteReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/router`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateRouteReq
    },
      options);
    }
  


export const getUpdateRouterMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRouter>>, TError,{data: UpdateRouteReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateRouter>>, TError,{data: UpdateRouteReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRouter>>, {data: UpdateRouteReq}> = (props) => {
          const {data} = props ?? {};

          return  updateRouter(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateRouterMutationResult = NonNullable<Awaited<ReturnType<typeof updateRouter>>>
    export type UpdateRouterMutationBody = UpdateRouteReq
    export type UpdateRouterMutationError = ErrorType<unknown>

    /**
 * @summary update router
 */
export const useUpdateRouter = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRouter>>, TError,{data: UpdateRouteReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateRouterMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete router
 * @summary delete router
 */
export const deleteRouter = (
    params: DeleteRouterParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/router`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteRouterMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouter>>, TError,{params: DeleteRouterParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRouter>>, TError,{params: DeleteRouterParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRouter>>, {params: DeleteRouterParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteRouter(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteRouterMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRouter>>>
    
    export type DeleteRouterMutationError = ErrorType<unknown>

    /**
 * @summary delete router
 */
export const useDeleteRouter = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouter>>, TError,{params: DeleteRouterParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteRouterMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get all menu
 * @summary get all menu
 */
export const getAllRouter = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<RoutesVecRes>(
      {url: `/manager/router/all`, method: 'get', signal
    },
      options);
    }
  

export const getGetAllRouterQueryKey = () => [`/manager/router/all`] as const;
  

    
export const getGetAllRouterQueryOptions = <TData = Awaited<ReturnType<typeof getAllRouter>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getAllRouter>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllRouterQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRouter>>> = ({ signal }) => getAllRouter(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAllRouterQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRouter>>>
export type GetAllRouterQueryError = ErrorType<unknown>

/**
 * @summary get all menu
 */
export const useGetAllRouter = <TData = Awaited<ReturnType<typeof getAllRouter>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllRouterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const associateAuthRouter = (
    associateRouterAuthReq: AssociateRouterAuthReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/router/associate`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: associateRouterAuthReq
    },
      options);
    }
  


export const getAssociateAuthRouterMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associateAuthRouter>>, TError,{data: AssociateRouterAuthReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof associateAuthRouter>>, TError,{data: AssociateRouterAuthReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof associateAuthRouter>>, {data: AssociateRouterAuthReq}> = (props) => {
          const {data} = props ?? {};

          return  associateAuthRouter(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AssociateAuthRouterMutationResult = NonNullable<Awaited<ReturnType<typeof associateAuthRouter>>>
    export type AssociateAuthRouterMutationBody = AssociateRouterAuthReq
    export type AssociateAuthRouterMutationError = ErrorType<unknown>

    export const useAssociateAuthRouter = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof associateAuthRouter>>, TError,{data: AssociateRouterAuthReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getAssociateAuthRouterMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get auth limit with router associated
 * @summary get auth limit with router associated
 */
export const getAuthWithRouter = (
    params: GetAuthWithRouterParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<RouterAssociateAuthLimitRes>(
      {url: `/manager/router/associate/auth`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetAuthWithRouterQueryKey = (params: GetAuthWithRouterParams,) => [`/manager/router/associate/auth`, ...(params ? [params]: [])] as const;
  

    
export const getGetAuthWithRouterQueryOptions = <TData = Awaited<ReturnType<typeof getAuthWithRouter>>, TError = ErrorType<unknown>>(params: GetAuthWithRouterParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthWithRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getAuthWithRouter>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthWithRouterQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthWithRouter>>> = ({ signal }) => getAuthWithRouter(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAuthWithRouterQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthWithRouter>>>
export type GetAuthWithRouterQueryError = ErrorType<unknown>

/**
 * @summary get auth limit with router associated
 */
export const useGetAuthWithRouter = <TData = Awaited<ReturnType<typeof getAuthWithRouter>>, TError = ErrorType<unknown>>(
 params: GetAuthWithRouterParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthWithRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthWithRouterQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get accessKey
 * @summary get accessKey
 */
export const getAccessKey = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<AccessKeyRes>(
      {url: `/manager/upload/accessKey`, method: 'get', signal
    },
      options);
    }
  

export const getGetAccessKeyQueryKey = () => [`/manager/upload/accessKey`] as const;
  

    
export const getGetAccessKeyQueryOptions = <TData = Awaited<ReturnType<typeof getAccessKey>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAccessKey>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getAccessKey>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAccessKeyQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccessKey>>> = ({ signal }) => getAccessKey(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAccessKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getAccessKey>>>
export type GetAccessKeyQueryError = ErrorType<unknown>

/**
 * @summary get accessKey
 */
export const useGetAccessKey = <TData = Awaited<ReturnType<typeof getAccessKey>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAccessKey>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAccessKeyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


