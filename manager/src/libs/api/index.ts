/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * actic_web_app_project
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  AuthLimitRes,
  GetAuthLimitParams,
  AdminInfoRes,
  ResPonseString,
  LoginBody,
  CommentRes,
  GetCommentLimitParams,
  RecoverCommentReq,
  DeleteCommentParams,
  SkuRes,
  GetSkuLimitParams,
  SkuUpdateReq,
  DeleteSkuParams,
  SkuNoticeRes,
  GetSkuNoticeParams,
  SkuNoticeUpdateResData,
  SkuNoticeUpdateReq,
  DeleteSkuNoticeParams,
  SpuRes,
  GetSpuLimitParams,
  SpuUpdateResData,
  UpdateSpuReq,
  DeleteSpuParams,
  SpuDetailRes,
  GetSpuDetailParams,
  SpuNoticeRes,
  GetSpuNoticeParams,
  SpuNoticeUpdateResData,
  SpuNoticeUpdateReq,
  DeleteSpuNoticeParams,
  SpuSkuTreeRes,
  GetSpuTreeLimitParams,
  SpuUpdateRecordRes,
  GetSpuUpdateRecordParams,
  UpdateSpuUpdateRecordRes,
  UpdateSpuUpdateRecord,
  DeleteSpuUpdateRecordParams,
  CompanyStudioRes,
  GetCompanyParams,
  UpdateCompanyStudioReq,
  DeleteCompanyStudioParams,
  CompanyStudioDetailRes,
  GetCompanyDetailParams,
  ListRes,
  GameTagsRes,
  GetTagsLimitParams,
  ResPonseU8,
  UpdateTagReq,
  DeleteTagsParams,
  GameTypeRes,
  GetGameTypesParams,
  UpdateGameTypeReq,
  DeleteGameTypeParams,
  ManagerInfoRes,
  GetManagersLimitParams,
  ManagerSignupAccount,
  ManagerAvatarApplyReq,
  ManagerAvatarAuditRowRes,
  GetManagerAvatarAuditsParams,
  ManagerAvatarAuditReq,
  DeleteManagerAvatarAuditParams,
  SendManagerEmailResData,
  SendEmailReq,
  EmailRow,
  ManagerInfoWithTokenData,
  ManagerInfoUpdate,
  ManagerSignIn,
  ActivityRes,
  GetActivityLimitParams,
  DeleteActivityParams,
  ResponseU64,
  ActivityUpdateStepOneReq,
  ActivityDetailRes,
  GetActivityDetailParams,
  ActivityGoodsRes,
  GetActivityGoodsLimitParams,
  ActivityBundleInsertGoodsReq,
  DeleteActivityGoodsBundleParams,
  ActivityPromotionUpdateGoodsReq,
  DeleteActivityGoodsPromotionParams,
  ActivityUpdateStepTwoReq,
  MarketCarouselRes,
  UpdateCarouselReq,
  DeleteCarouselParams,
  MarketHotActivityRes,
  GetHotActivityParams,
  UpdateHotActivityReq,
  DeleteHotActivityParams,
  MarketNewsLimitRes,
  GetNewsParams,
  UpdateNewsReq,
  DeleteNewsParams,
  MaterialImageRes,
  GetImagesParams,
  UpdateImageObjectReq,
  DeleteImageParams,
  BatchDeleteMaterialImagesReq,
  PermissionLimitRes,
  GetPermissionParams,
  UpdatePermissionBody,
  DeletePermissionParams,
  ManagerRoleRes,
  GetManagerRolesParams,
  ManagerRoleUpdateReq,
  DeleteManagerRoleParams,
  RoleAuditRowRes,
  GetRoleAuditLimitParams,
  RoleAuditReq,
  DeleteRoleAuditParams,
  ApplyRoleReq,
  CurrentRoleAuditRes,
  ManagerRolePermissionRowRes,
  GetManagerRolePermissionsParams,
  ManagerRolePermissionStatusReq,
  ManagerRoleRouterRowRes,
  GetManagerRoleRouterParams,
  ManagerRoleRouterStatusReq,
  RoutesVecRes,
  UpdateRouteReq,
  DeleteRouterParams,
  AccessKeyRes,
  UserRes,
  GetUserLimitParams,
  BannedUser,
  UnblockUserParams,
  UserDetailRes,
  GetUserDetailParams
} from './schema'
import { custom_instance } from './custom_instance';
import type { ErrorType } from './custom_instance';



// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * auth limit
 * @summary auth limit
 */
export const getAuthLimit = (
    params?: GetAuthLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<AuthLimitRes>(
      {url: `/manager/auth`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetAuthLimitQueryKey = (params?: GetAuthLimitParams,) => [`/manager/auth`, ...(params ? [params]: [])] as const;
  

    
export const getGetAuthLimitQueryOptions = <TData = Awaited<ReturnType<typeof getAuthLimit>>, TError = ErrorType<unknown>>(params?: GetAuthLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getAuthLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthLimit>>> = ({ signal }) => getAuthLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAuthLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthLimit>>>
export type GetAuthLimitQueryError = ErrorType<unknown>

/**
 * @summary auth limit
 */
export const useGetAuthLimit = <TData = Awaited<ReturnType<typeof getAuthLimit>>, TError = ErrorType<unknown>>(
 params?: GetAuthLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const getAdminInfo = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<AdminInfoRes>(
      {url: `/manager/auth/info`, method: 'get', signal
    },
      options);
    }
  

export const getGetAdminInfoQueryKey = () => [`/manager/auth/info`] as const;
  

    
export const getGetAdminInfoQueryOptions = <TData = Awaited<ReturnType<typeof getAdminInfo>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminInfo>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getAdminInfo>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminInfoQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminInfo>>> = ({ signal }) => getAdminInfo(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAdminInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminInfo>>>
export type GetAdminInfoQueryError = ErrorType<unknown>

export const useGetAdminInfo = <TData = Awaited<ReturnType<typeof getAdminInfo>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminInfo>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * sign in
 * @summary sign in
 */
export const signIn = (
    loginBody: LoginBody,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/auth/signIn`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: loginBody
    },
      options);
    }
  


export const getSignInMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: LoginBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: LoginBody}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signIn>>, {data: LoginBody}> = (props) => {
          const {data} = props ?? {};

          return  signIn(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type SignInMutationResult = NonNullable<Awaited<ReturnType<typeof signIn>>>
    export type SignInMutationBody = LoginBody
    export type SignInMutationError = ErrorType<unknown>

    /**
 * @summary sign in
 */
export const useSignIn = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: LoginBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getSignInMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get comment limit
 * @summary get comment limit
 */
export const getCommentLimit = (
    params: GetCommentLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<CommentRes>(
      {url: `/manager/gamesCenter/comments`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetCommentLimitQueryKey = (params: GetCommentLimitParams,) => [`/manager/gamesCenter/comments`, ...(params ? [params]: [])] as const;
  

    
export const getGetCommentLimitQueryOptions = <TData = Awaited<ReturnType<typeof getCommentLimit>>, TError = ErrorType<unknown>>(params: GetCommentLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCommentLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCommentLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCommentLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCommentLimit>>> = ({ signal }) => getCommentLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCommentLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getCommentLimit>>>
export type GetCommentLimitQueryError = ErrorType<unknown>

/**
 * @summary get comment limit
 */
export const useGetCommentLimit = <TData = Awaited<ReturnType<typeof getCommentLimit>>, TError = ErrorType<unknown>>(
 params: GetCommentLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCommentLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCommentLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * delete comments physic/logic
 * @summary delete comments physic/logic
 */
export const recoverComment = (
    recoverCommentReq: RecoverCommentReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/comments`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: recoverCommentReq
    },
      options);
    }
  


export const getRecoverCommentMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recoverComment>>, TError,{data: RecoverCommentReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof recoverComment>>, TError,{data: RecoverCommentReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof recoverComment>>, {data: RecoverCommentReq}> = (props) => {
          const {data} = props ?? {};

          return  recoverComment(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type RecoverCommentMutationResult = NonNullable<Awaited<ReturnType<typeof recoverComment>>>
    export type RecoverCommentMutationBody = RecoverCommentReq
    export type RecoverCommentMutationError = ErrorType<unknown>

    /**
 * @summary delete comments physic/logic
 */
export const useRecoverComment = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recoverComment>>, TError,{data: RecoverCommentReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getRecoverCommentMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete comments physic/logic
 * @summary delete comments physic/logic
 */
export const deleteComment = (
    params: DeleteCommentParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/comments`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteCommentMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{params: DeleteCommentParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{params: DeleteCommentParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteComment>>, {params: DeleteCommentParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteComment(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteCommentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteComment>>>
    
    export type DeleteCommentMutationError = ErrorType<unknown>

    /**
 * @summary delete comments physic/logic
 */
export const useDeleteComment = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{params: DeleteCommentParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteCommentMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get sku limit
 * @summary get sku limit
 */
export const getSkuLimit = (
    params?: GetSkuLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<SkuRes>(
      {url: `/manager/gamesCenter/gamesManagement/sku`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetSkuLimitQueryKey = (params?: GetSkuLimitParams,) => [`/manager/gamesCenter/gamesManagement/sku`, ...(params ? [params]: [])] as const;
  

    
export const getGetSkuLimitQueryOptions = <TData = Awaited<ReturnType<typeof getSkuLimit>>, TError = ErrorType<unknown>>(params?: GetSkuLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSkuLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getSkuLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSkuLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSkuLimit>>> = ({ signal }) => getSkuLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSkuLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getSkuLimit>>>
export type GetSkuLimitQueryError = ErrorType<unknown>

/**
 * @summary get sku limit
 */
export const useGetSkuLimit = <TData = Awaited<ReturnType<typeof getSkuLimit>>, TError = ErrorType<unknown>>(
 params?: GetSkuLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSkuLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSkuLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update SKU
 * @summary update SKU
 */
export const updateSku = (
    skuUpdateReq: SkuUpdateReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/gamesManagement/sku`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: skuUpdateReq
    },
      options);
    }
  


export const getUpdateSkuMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSku>>, TError,{data: SkuUpdateReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateSku>>, TError,{data: SkuUpdateReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSku>>, {data: SkuUpdateReq}> = (props) => {
          const {data} = props ?? {};

          return  updateSku(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateSkuMutationResult = NonNullable<Awaited<ReturnType<typeof updateSku>>>
    export type UpdateSkuMutationBody = SkuUpdateReq
    export type UpdateSkuMutationError = ErrorType<unknown>

    /**
 * @summary update SKU
 */
export const useUpdateSku = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSku>>, TError,{data: SkuUpdateReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateSkuMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete sku
 * @summary delete sku
 */
export const deleteSku = (
    params: DeleteSkuParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/gamesManagement/sku`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteSkuMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSku>>, TError,{params: DeleteSkuParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSku>>, TError,{params: DeleteSkuParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSku>>, {params: DeleteSkuParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteSku(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteSkuMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSku>>>
    
    export type DeleteSkuMutationError = ErrorType<unknown>

    /**
 * @summary delete sku
 */
export const useDeleteSku = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSku>>, TError,{params: DeleteSkuParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteSkuMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get sku notice limit
 * @summary get sku notice limit
 */
export const getSkuNotice = (
    params?: GetSkuNoticeParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<SkuNoticeRes>(
      {url: `/manager/gamesCenter/gamesManagement/sku/notice`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetSkuNoticeQueryKey = (params?: GetSkuNoticeParams,) => [`/manager/gamesCenter/gamesManagement/sku/notice`, ...(params ? [params]: [])] as const;
  

    
export const getGetSkuNoticeQueryOptions = <TData = Awaited<ReturnType<typeof getSkuNotice>>, TError = ErrorType<unknown>>(params?: GetSkuNoticeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSkuNotice>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getSkuNotice>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSkuNoticeQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSkuNotice>>> = ({ signal }) => getSkuNotice(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSkuNoticeQueryResult = NonNullable<Awaited<ReturnType<typeof getSkuNotice>>>
export type GetSkuNoticeQueryError = ErrorType<unknown>

/**
 * @summary get sku notice limit
 */
export const useGetSkuNotice = <TData = Awaited<ReturnType<typeof getSkuNotice>>, TError = ErrorType<unknown>>(
 params?: GetSkuNoticeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSkuNotice>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSkuNoticeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const updateSkuNotice = (
    skuNoticeUpdateReq: SkuNoticeUpdateReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<SkuNoticeUpdateResData>(
      {url: `/manager/gamesCenter/gamesManagement/sku/notice`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: skuNoticeUpdateReq
    },
      options);
    }
  


export const getUpdateSkuNoticeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSkuNotice>>, TError,{data: SkuNoticeUpdateReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateSkuNotice>>, TError,{data: SkuNoticeUpdateReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSkuNotice>>, {data: SkuNoticeUpdateReq}> = (props) => {
          const {data} = props ?? {};

          return  updateSkuNotice(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateSkuNoticeMutationResult = NonNullable<Awaited<ReturnType<typeof updateSkuNotice>>>
    export type UpdateSkuNoticeMutationBody = SkuNoticeUpdateReq
    export type UpdateSkuNoticeMutationError = ErrorType<unknown>

    export const useUpdateSkuNotice = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSkuNotice>>, TError,{data: SkuNoticeUpdateReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateSkuNoticeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete sku notice
 * @summary delete sku notice
 */
export const deleteSkuNotice = (
    params: DeleteSkuNoticeParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/gamesManagement/sku/notice`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteSkuNoticeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSkuNotice>>, TError,{params: DeleteSkuNoticeParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSkuNotice>>, TError,{params: DeleteSkuNoticeParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSkuNotice>>, {params: DeleteSkuNoticeParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteSkuNotice(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteSkuNoticeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSkuNotice>>>
    
    export type DeleteSkuNoticeMutationError = ErrorType<unknown>

    /**
 * @summary delete sku notice
 */
export const useDeleteSkuNotice = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSkuNotice>>, TError,{params: DeleteSkuNoticeParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteSkuNoticeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get SPU limit
 * @summary get SPU limit
 */
export const getSpuLimit = (
    params?: GetSpuLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<SpuRes>(
      {url: `/manager/gamesCenter/gamesManagement/spu`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetSpuLimitQueryKey = (params?: GetSpuLimitParams,) => [`/manager/gamesCenter/gamesManagement/spu`, ...(params ? [params]: [])] as const;
  

    
export const getGetSpuLimitQueryOptions = <TData = Awaited<ReturnType<typeof getSpuLimit>>, TError = ErrorType<unknown>>(params?: GetSpuLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getSpuLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSpuLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSpuLimit>>> = ({ signal }) => getSpuLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSpuLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getSpuLimit>>>
export type GetSpuLimitQueryError = ErrorType<unknown>

/**
 * @summary get SPU limit
 */
export const useGetSpuLimit = <TData = Awaited<ReturnType<typeof getSpuLimit>>, TError = ErrorType<unknown>>(
 params?: GetSpuLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSpuLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update SPU
 * @summary update SPU
 */
export const updateSpu = (
    updateSpuReq: UpdateSpuReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<SpuUpdateResData>(
      {url: `/manager/gamesCenter/gamesManagement/spu`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateSpuReq
    },
      options);
    }
  


export const getUpdateSpuMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSpu>>, TError,{data: UpdateSpuReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateSpu>>, TError,{data: UpdateSpuReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSpu>>, {data: UpdateSpuReq}> = (props) => {
          const {data} = props ?? {};

          return  updateSpu(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateSpuMutationResult = NonNullable<Awaited<ReturnType<typeof updateSpu>>>
    export type UpdateSpuMutationBody = UpdateSpuReq
    export type UpdateSpuMutationError = ErrorType<unknown>

    /**
 * @summary update SPU
 */
export const useUpdateSpu = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSpu>>, TError,{data: UpdateSpuReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateSpuMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete SPU
 * @summary delete SPU
 */
export const deleteSpu = (
    params: DeleteSpuParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/gamesManagement/spu`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteSpuMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSpu>>, TError,{params: DeleteSpuParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSpu>>, TError,{params: DeleteSpuParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSpu>>, {params: DeleteSpuParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteSpu(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteSpuMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSpu>>>
    
    export type DeleteSpuMutationError = ErrorType<unknown>

    /**
 * @summary delete SPU
 */
export const useDeleteSpu = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSpu>>, TError,{params: DeleteSpuParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteSpuMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get SPU detail
 * @summary get SPU detail
 */
export const getSpuDetail = (
    params: GetSpuDetailParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<SpuDetailRes>(
      {url: `/manager/gamesCenter/gamesManagement/spu/detail`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetSpuDetailQueryKey = (params: GetSpuDetailParams,) => [`/manager/gamesCenter/gamesManagement/spu/detail`, ...(params ? [params]: [])] as const;
  

    
export const getGetSpuDetailQueryOptions = <TData = Awaited<ReturnType<typeof getSpuDetail>>, TError = ErrorType<unknown>>(params: GetSpuDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getSpuDetail>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSpuDetailQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSpuDetail>>> = ({ signal }) => getSpuDetail(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSpuDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getSpuDetail>>>
export type GetSpuDetailQueryError = ErrorType<unknown>

/**
 * @summary get SPU detail
 */
export const useGetSpuDetail = <TData = Awaited<ReturnType<typeof getSpuDetail>>, TError = ErrorType<unknown>>(
 params: GetSpuDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSpuDetailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get spu notice limit
 * @summary get spu notice limit
 */
export const getSpuNotice = (
    params?: GetSpuNoticeParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<SpuNoticeRes>(
      {url: `/manager/gamesCenter/gamesManagement/spu/notice`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetSpuNoticeQueryKey = (params?: GetSpuNoticeParams,) => [`/manager/gamesCenter/gamesManagement/spu/notice`, ...(params ? [params]: [])] as const;
  

    
export const getGetSpuNoticeQueryOptions = <TData = Awaited<ReturnType<typeof getSpuNotice>>, TError = ErrorType<unknown>>(params?: GetSpuNoticeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuNotice>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getSpuNotice>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSpuNoticeQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSpuNotice>>> = ({ signal }) => getSpuNotice(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSpuNoticeQueryResult = NonNullable<Awaited<ReturnType<typeof getSpuNotice>>>
export type GetSpuNoticeQueryError = ErrorType<unknown>

/**
 * @summary get spu notice limit
 */
export const useGetSpuNotice = <TData = Awaited<ReturnType<typeof getSpuNotice>>, TError = ErrorType<unknown>>(
 params?: GetSpuNoticeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuNotice>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSpuNoticeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const updateSpuNotice = (
    spuNoticeUpdateReq: SpuNoticeUpdateReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<SpuNoticeUpdateResData>(
      {url: `/manager/gamesCenter/gamesManagement/spu/notice`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: spuNoticeUpdateReq
    },
      options);
    }
  


export const getUpdateSpuNoticeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSpuNotice>>, TError,{data: SpuNoticeUpdateReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateSpuNotice>>, TError,{data: SpuNoticeUpdateReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSpuNotice>>, {data: SpuNoticeUpdateReq}> = (props) => {
          const {data} = props ?? {};

          return  updateSpuNotice(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateSpuNoticeMutationResult = NonNullable<Awaited<ReturnType<typeof updateSpuNotice>>>
    export type UpdateSpuNoticeMutationBody = SpuNoticeUpdateReq
    export type UpdateSpuNoticeMutationError = ErrorType<unknown>

    export const useUpdateSpuNotice = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSpuNotice>>, TError,{data: SpuNoticeUpdateReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateSpuNoticeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete spu notice
 * @summary delete spu notice
 */
export const deleteSpuNotice = (
    params: DeleteSpuNoticeParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/gamesManagement/spu/notice`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteSpuNoticeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSpuNotice>>, TError,{params: DeleteSpuNoticeParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSpuNotice>>, TError,{params: DeleteSpuNoticeParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSpuNotice>>, {params: DeleteSpuNoticeParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteSpuNotice(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteSpuNoticeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSpuNotice>>>
    
    export type DeleteSpuNoticeMutationError = ErrorType<unknown>

    /**
 * @summary delete spu notice
 */
export const useDeleteSpuNotice = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSpuNotice>>, TError,{params: DeleteSpuNoticeParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteSpuNoticeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get SPU tree limit
 * @summary get SPU tree limit
 */
export const getSpuTreeLimit = (
    params?: GetSpuTreeLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<SpuSkuTreeRes>(
      {url: `/manager/gamesCenter/gamesManagement/spu/tree`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetSpuTreeLimitQueryKey = (params?: GetSpuTreeLimitParams,) => [`/manager/gamesCenter/gamesManagement/spu/tree`, ...(params ? [params]: [])] as const;
  

    
export const getGetSpuTreeLimitQueryOptions = <TData = Awaited<ReturnType<typeof getSpuTreeLimit>>, TError = ErrorType<unknown>>(params?: GetSpuTreeLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuTreeLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getSpuTreeLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSpuTreeLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSpuTreeLimit>>> = ({ signal }) => getSpuTreeLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSpuTreeLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getSpuTreeLimit>>>
export type GetSpuTreeLimitQueryError = ErrorType<unknown>

/**
 * @summary get SPU tree limit
 */
export const useGetSpuTreeLimit = <TData = Awaited<ReturnType<typeof getSpuTreeLimit>>, TError = ErrorType<unknown>>(
 params?: GetSpuTreeLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuTreeLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSpuTreeLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get spu update record limit
 * @summary get spu update record limit
 */
export const getSpuUpdateRecord = (
    params?: GetSpuUpdateRecordParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<SpuUpdateRecordRes>(
      {url: `/manager/gamesCenter/gamesManagement/spu/updateRecord`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetSpuUpdateRecordQueryKey = (params?: GetSpuUpdateRecordParams,) => [`/manager/gamesCenter/gamesManagement/spu/updateRecord`, ...(params ? [params]: [])] as const;
  

    
export const getGetSpuUpdateRecordQueryOptions = <TData = Awaited<ReturnType<typeof getSpuUpdateRecord>>, TError = ErrorType<unknown>>(params?: GetSpuUpdateRecordParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuUpdateRecord>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getSpuUpdateRecord>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSpuUpdateRecordQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSpuUpdateRecord>>> = ({ signal }) => getSpuUpdateRecord(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetSpuUpdateRecordQueryResult = NonNullable<Awaited<ReturnType<typeof getSpuUpdateRecord>>>
export type GetSpuUpdateRecordQueryError = ErrorType<unknown>

/**
 * @summary get spu update record limit
 */
export const useGetSpuUpdateRecord = <TData = Awaited<ReturnType<typeof getSpuUpdateRecord>>, TError = ErrorType<unknown>>(
 params?: GetSpuUpdateRecordParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSpuUpdateRecord>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSpuUpdateRecordQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update spu update record
 * @summary update spu update record
 */
export const updateSpuUpdateRecord = (
    updateSpuUpdateRecord: UpdateSpuUpdateRecord,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<UpdateSpuUpdateRecordRes>(
      {url: `/manager/gamesCenter/gamesManagement/spu/updateRecord`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateSpuUpdateRecord
    },
      options);
    }
  


export const getUpdateSpuUpdateRecordMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSpuUpdateRecord>>, TError,{data: UpdateSpuUpdateRecord}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateSpuUpdateRecord>>, TError,{data: UpdateSpuUpdateRecord}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSpuUpdateRecord>>, {data: UpdateSpuUpdateRecord}> = (props) => {
          const {data} = props ?? {};

          return  updateSpuUpdateRecord(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateSpuUpdateRecordMutationResult = NonNullable<Awaited<ReturnType<typeof updateSpuUpdateRecord>>>
    export type UpdateSpuUpdateRecordMutationBody = UpdateSpuUpdateRecord
    export type UpdateSpuUpdateRecordMutationError = ErrorType<unknown>

    /**
 * @summary update spu update record
 */
export const useUpdateSpuUpdateRecord = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSpuUpdateRecord>>, TError,{data: UpdateSpuUpdateRecord}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateSpuUpdateRecordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete spu update record
 * @summary delete spu update record
 */
export const deleteSpuUpdateRecord = (
    params: DeleteSpuUpdateRecordParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/gamesManagement/spu/updateRecord`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteSpuUpdateRecordMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSpuUpdateRecord>>, TError,{params: DeleteSpuUpdateRecordParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSpuUpdateRecord>>, TError,{params: DeleteSpuUpdateRecordParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSpuUpdateRecord>>, {params: DeleteSpuUpdateRecordParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteSpuUpdateRecord(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteSpuUpdateRecordMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSpuUpdateRecord>>>
    
    export type DeleteSpuUpdateRecordMutationError = ErrorType<unknown>

    /**
 * @summary delete spu update record
 */
export const useDeleteSpuUpdateRecord = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSpuUpdateRecord>>, TError,{params: DeleteSpuUpdateRecordParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteSpuUpdateRecordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get company/studio
 * @summary get company/studio
 */
export const getCompany = (
    params?: GetCompanyParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<CompanyStudioRes>(
      {url: `/manager/gamesCenter/general/companyStudio`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetCompanyQueryKey = (params?: GetCompanyParams,) => [`/manager/gamesCenter/general/companyStudio`, ...(params ? [params]: [])] as const;
  

    
export const getGetCompanyQueryOptions = <TData = Awaited<ReturnType<typeof getCompany>>, TError = ErrorType<unknown>>(params?: GetCompanyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompany>>> = ({ signal }) => getCompany(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCompanyQueryResult = NonNullable<Awaited<ReturnType<typeof getCompany>>>
export type GetCompanyQueryError = ErrorType<unknown>

/**
 * @summary get company/studio
 */
export const useGetCompany = <TData = Awaited<ReturnType<typeof getCompany>>, TError = ErrorType<unknown>>(
 params?: GetCompanyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCompanyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update company/studio
 * @summary update company/studio
 */
export const updateCompany = (
    updateCompanyStudioReq: UpdateCompanyStudioReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/general/companyStudio`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateCompanyStudioReq
    },
      options);
    }
  


export const getUpdateCompanyMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCompany>>, TError,{data: UpdateCompanyStudioReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCompany>>, TError,{data: UpdateCompanyStudioReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCompany>>, {data: UpdateCompanyStudioReq}> = (props) => {
          const {data} = props ?? {};

          return  updateCompany(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateCompanyMutationResult = NonNullable<Awaited<ReturnType<typeof updateCompany>>>
    export type UpdateCompanyMutationBody = UpdateCompanyStudioReq
    export type UpdateCompanyMutationError = ErrorType<unknown>

    /**
 * @summary update company/studio
 */
export const useUpdateCompany = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCompany>>, TError,{data: UpdateCompanyStudioReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateCompanyMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete company/studio
 * @summary delete company/studio
 */
export const deleteCompanyStudio = (
    params: DeleteCompanyStudioParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/general/companyStudio`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteCompanyStudioMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCompanyStudio>>, TError,{params: DeleteCompanyStudioParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCompanyStudio>>, TError,{params: DeleteCompanyStudioParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCompanyStudio>>, {params: DeleteCompanyStudioParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteCompanyStudio(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteCompanyStudioMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCompanyStudio>>>
    
    export type DeleteCompanyStudioMutationError = ErrorType<unknown>

    /**
 * @summary delete company/studio
 */
export const useDeleteCompanyStudio = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCompanyStudio>>, TError,{params: DeleteCompanyStudioParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteCompanyStudioMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get company/studio detail
 * @summary get company/studio detail
 */
export const getCompanyDetail = (
    params: GetCompanyDetailParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<CompanyStudioDetailRes>(
      {url: `/manager/gamesCenter/general/companyStudio/detail`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetCompanyDetailQueryKey = (params: GetCompanyDetailParams,) => [`/manager/gamesCenter/general/companyStudio/detail`, ...(params ? [params]: [])] as const;
  

    
export const getGetCompanyDetailQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyDetail>>, TError = ErrorType<unknown>>(params: GetCompanyDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompanyDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCompanyDetail>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyDetailQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyDetail>>> = ({ signal }) => getCompanyDetail(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCompanyDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyDetail>>>
export type GetCompanyDetailQueryError = ErrorType<unknown>

/**
 * @summary get company/studio detail
 */
export const useGetCompanyDetail = <TData = Awaited<ReturnType<typeof getCompanyDetail>>, TError = ErrorType<unknown>>(
 params: GetCompanyDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompanyDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCompanyDetailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get company list
 * @summary get company list
 */
export const getCompanyList = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ListRes>(
      {url: `/manager/gamesCenter/general/companyStudio/list`, method: 'get', signal
    },
      options);
    }
  

export const getGetCompanyListQueryKey = () => [`/manager/gamesCenter/general/companyStudio/list`] as const;
  

    
export const getGetCompanyListQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyList>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompanyList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCompanyList>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCompanyListQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyList>>> = ({ signal }) => getCompanyList(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCompanyListQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyList>>>
export type GetCompanyListQueryError = ErrorType<unknown>

/**
 * @summary get company list
 */
export const useGetCompanyList = <TData = Awaited<ReturnType<typeof getCompanyList>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCompanyList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCompanyListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get tags limit
 * @summary get tags limit
 */
export const getTagsLimit = (
    params?: GetTagsLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<GameTagsRes>(
      {url: `/manager/gamesCenter/general/tags`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetTagsLimitQueryKey = (params?: GetTagsLimitParams,) => [`/manager/gamesCenter/general/tags`, ...(params ? [params]: [])] as const;
  

    
export const getGetTagsLimitQueryOptions = <TData = Awaited<ReturnType<typeof getTagsLimit>>, TError = ErrorType<unknown>>(params?: GetTagsLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getTagsLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsLimit>>> = ({ signal }) => getTagsLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetTagsLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getTagsLimit>>>
export type GetTagsLimitQueryError = ErrorType<unknown>

/**
 * @summary get tags limit
 */
export const useGetTagsLimit = <TData = Awaited<ReturnType<typeof getTagsLimit>>, TError = ErrorType<unknown>>(
 params?: GetTagsLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTagsLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update tags
 * @summary update tags
 */
export const updateTags = (
    updateTagReq: UpdateTagReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/gamesCenter/general/tags`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateTagReq
    },
      options);
    }
  


export const getUpdateTagsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTags>>, TError,{data: UpdateTagReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateTags>>, TError,{data: UpdateTagReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTags>>, {data: UpdateTagReq}> = (props) => {
          const {data} = props ?? {};

          return  updateTags(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateTagsMutationResult = NonNullable<Awaited<ReturnType<typeof updateTags>>>
    export type UpdateTagsMutationBody = UpdateTagReq
    export type UpdateTagsMutationError = ErrorType<unknown>

    /**
 * @summary update tags
 */
export const useUpdateTags = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTags>>, TError,{data: UpdateTagReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateTagsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete tags
 * @summary delete tags
 */
export const deleteTags = (
    params: DeleteTagsParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/gamesCenter/general/tags`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteTagsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTags>>, TError,{params: DeleteTagsParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTags>>, TError,{params: DeleteTagsParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTags>>, {params: DeleteTagsParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteTags(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteTagsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTags>>>
    
    export type DeleteTagsMutationError = ErrorType<unknown>

    /**
 * @summary delete tags
 */
export const useDeleteTags = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTags>>, TError,{params: DeleteTagsParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteTagsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get tags list
 * @summary get tags list
 */
export const getTagsList = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ListRes>(
      {url: `/manager/gamesCenter/general/tags/list`, method: 'get', signal
    },
      options);
    }
  

export const getGetTagsListQueryKey = () => [`/manager/gamesCenter/general/tags/list`] as const;
  

    
export const getGetTagsListQueryOptions = <TData = Awaited<ReturnType<typeof getTagsList>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getTagsList>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTagsListQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsList>>> = ({ signal }) => getTagsList(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetTagsListQueryResult = NonNullable<Awaited<ReturnType<typeof getTagsList>>>
export type GetTagsListQueryError = ErrorType<unknown>

/**
 * @summary get tags list
 */
export const useGetTagsList = <TData = Awaited<ReturnType<typeof getTagsList>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTagsList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTagsListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get game types limit
 * @summary get game types limit
 */
export const getGameTypes = (
    params?: GetGameTypesParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<GameTypeRes>(
      {url: `/manager/gamesCenter/general/types`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetGameTypesQueryKey = (params?: GetGameTypesParams,) => [`/manager/gamesCenter/general/types`, ...(params ? [params]: [])] as const;
  

    
export const getGetGameTypesQueryOptions = <TData = Awaited<ReturnType<typeof getGameTypes>>, TError = ErrorType<unknown>>(params?: GetGameTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGameTypes>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getGameTypes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGameTypesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGameTypes>>> = ({ signal }) => getGameTypes(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetGameTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getGameTypes>>>
export type GetGameTypesQueryError = ErrorType<unknown>

/**
 * @summary get game types limit
 */
export const useGetGameTypes = <TData = Awaited<ReturnType<typeof getGameTypes>>, TError = ErrorType<unknown>>(
 params?: GetGameTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getGameTypes>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetGameTypesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update game types
 * @summary update game types
 */
export const updateGameType = (
    updateGameTypeReq: UpdateGameTypeReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/general/types`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateGameTypeReq
    },
      options);
    }
  


export const getUpdateGameTypeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGameType>>, TError,{data: UpdateGameTypeReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateGameType>>, TError,{data: UpdateGameTypeReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateGameType>>, {data: UpdateGameTypeReq}> = (props) => {
          const {data} = props ?? {};

          return  updateGameType(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateGameTypeMutationResult = NonNullable<Awaited<ReturnType<typeof updateGameType>>>
    export type UpdateGameTypeMutationBody = UpdateGameTypeReq
    export type UpdateGameTypeMutationError = ErrorType<unknown>

    /**
 * @summary update game types
 */
export const useUpdateGameType = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateGameType>>, TError,{data: UpdateGameTypeReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateGameTypeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete game type
 * @summary delete game type
 */
export const deleteGameType = (
    params: DeleteGameTypeParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/gamesCenter/general/types`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteGameTypeMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGameType>>, TError,{params: DeleteGameTypeParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteGameType>>, TError,{params: DeleteGameTypeParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteGameType>>, {params: DeleteGameTypeParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteGameType(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteGameTypeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGameType>>>
    
    export type DeleteGameTypeMutationError = ErrorType<unknown>

    /**
 * @summary delete game type
 */
export const useDeleteGameType = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGameType>>, TError,{params: DeleteGameTypeParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteGameTypeMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get types list
 * @summary get types list
 */
export const getTypesList = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ListRes>(
      {url: `/manager/gamesCenter/general/types/list`, method: 'get', signal
    },
      options);
    }
  

export const getGetTypesListQueryKey = () => [`/manager/gamesCenter/general/types/list`] as const;
  

    
export const getGetTypesListQueryOptions = <TData = Awaited<ReturnType<typeof getTypesList>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTypesList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getTypesList>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTypesListQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTypesList>>> = ({ signal }) => getTypesList(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetTypesListQueryResult = NonNullable<Awaited<ReturnType<typeof getTypesList>>>
export type GetTypesListQueryError = ErrorType<unknown>

/**
 * @summary get types list
 */
export const useGetTypesList = <TData = Awaited<ReturnType<typeof getTypesList>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTypesList>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTypesListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get managers limit
 * @summary get managers limit
 */
export const getManagersLimit = (
    params?: GetManagersLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ManagerInfoRes>(
      {url: `/manager/managers`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetManagersLimitQueryKey = (params?: GetManagersLimitParams,) => [`/manager/managers`, ...(params ? [params]: [])] as const;
  

    
export const getGetManagersLimitQueryOptions = <TData = Awaited<ReturnType<typeof getManagersLimit>>, TError = ErrorType<unknown>>(params?: GetManagersLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagersLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getManagersLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetManagersLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getManagersLimit>>> = ({ signal }) => getManagersLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetManagersLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getManagersLimit>>>
export type GetManagersLimitQueryError = ErrorType<unknown>

/**
 * @summary get managers limit
 */
export const useGetManagersLimit = <TData = Awaited<ReturnType<typeof getManagersLimit>>, TError = ErrorType<unknown>>(
 params?: GetManagersLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagersLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetManagersLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * manager account signup
 * @summary manager account signup
 */
export const managerSignup = (
    managerSignupAccount: ManagerSignupAccount,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/managers`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: managerSignupAccount
    },
      options);
    }
  


export const getManagerSignupMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof managerSignup>>, TError,{data: ManagerSignupAccount}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof managerSignup>>, TError,{data: ManagerSignupAccount}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof managerSignup>>, {data: ManagerSignupAccount}> = (props) => {
          const {data} = props ?? {};

          return  managerSignup(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ManagerSignupMutationResult = NonNullable<Awaited<ReturnType<typeof managerSignup>>>
    export type ManagerSignupMutationBody = ManagerSignupAccount
    export type ManagerSignupMutationError = ErrorType<unknown>

    /**
 * @summary manager account signup
 */
export const useManagerSignup = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof managerSignup>>, TError,{data: ManagerSignupAccount}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getManagerSignupMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const managerAvatarApply = (
    managerAvatarApplyReq: ManagerAvatarApplyReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/managers/avatar/apply`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: managerAvatarApplyReq
    },
      options);
    }
  


export const getManagerAvatarApplyMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof managerAvatarApply>>, TError,{data: ManagerAvatarApplyReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof managerAvatarApply>>, TError,{data: ManagerAvatarApplyReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof managerAvatarApply>>, {data: ManagerAvatarApplyReq}> = (props) => {
          const {data} = props ?? {};

          return  managerAvatarApply(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ManagerAvatarApplyMutationResult = NonNullable<Awaited<ReturnType<typeof managerAvatarApply>>>
    export type ManagerAvatarApplyMutationBody = ManagerAvatarApplyReq
    export type ManagerAvatarApplyMutationError = ErrorType<unknown>

    export const useManagerAvatarApply = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof managerAvatarApply>>, TError,{data: ManagerAvatarApplyReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getManagerAvatarApplyMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getManagerAvatarAudits = (
    params?: GetManagerAvatarAuditsParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ManagerAvatarAuditRowRes>(
      {url: `/manager/managers/avatar/audit`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetManagerAvatarAuditsQueryKey = (params?: GetManagerAvatarAuditsParams,) => [`/manager/managers/avatar/audit`, ...(params ? [params]: [])] as const;
  

    
export const getGetManagerAvatarAuditsQueryOptions = <TData = Awaited<ReturnType<typeof getManagerAvatarAudits>>, TError = ErrorType<unknown>>(params?: GetManagerAvatarAuditsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerAvatarAudits>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getManagerAvatarAudits>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetManagerAvatarAuditsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getManagerAvatarAudits>>> = ({ signal }) => getManagerAvatarAudits(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetManagerAvatarAuditsQueryResult = NonNullable<Awaited<ReturnType<typeof getManagerAvatarAudits>>>
export type GetManagerAvatarAuditsQueryError = ErrorType<unknown>

export const useGetManagerAvatarAudits = <TData = Awaited<ReturnType<typeof getManagerAvatarAudits>>, TError = ErrorType<unknown>>(
 params?: GetManagerAvatarAuditsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerAvatarAudits>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetManagerAvatarAuditsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const managerAvatarAudit = (
    managerAvatarAuditReq: ManagerAvatarAuditReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/managers/avatar/audit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: managerAvatarAuditReq
    },
      options);
    }
  


export const getManagerAvatarAuditMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof managerAvatarAudit>>, TError,{data: ManagerAvatarAuditReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof managerAvatarAudit>>, TError,{data: ManagerAvatarAuditReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof managerAvatarAudit>>, {data: ManagerAvatarAuditReq}> = (props) => {
          const {data} = props ?? {};

          return  managerAvatarAudit(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ManagerAvatarAuditMutationResult = NonNullable<Awaited<ReturnType<typeof managerAvatarAudit>>>
    export type ManagerAvatarAuditMutationBody = ManagerAvatarAuditReq
    export type ManagerAvatarAuditMutationError = ErrorType<unknown>

    export const useManagerAvatarAudit = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof managerAvatarAudit>>, TError,{data: ManagerAvatarAuditReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getManagerAvatarAuditMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteManagerAvatarAudit = (
    params: DeleteManagerAvatarAuditParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/managers/avatar/audit`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteManagerAvatarAuditMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteManagerAvatarAudit>>, TError,{params: DeleteManagerAvatarAuditParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteManagerAvatarAudit>>, TError,{params: DeleteManagerAvatarAuditParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteManagerAvatarAudit>>, {params: DeleteManagerAvatarAuditParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteManagerAvatarAudit(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteManagerAvatarAuditMutationResult = NonNullable<Awaited<ReturnType<typeof deleteManagerAvatarAudit>>>
    
    export type DeleteManagerAvatarAuditMutationError = ErrorType<unknown>

    export const useDeleteManagerAvatarAudit = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteManagerAvatarAudit>>, TError,{params: DeleteManagerAvatarAuditParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteManagerAvatarAuditMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * send manager email
 * @summary send manager email
 */
export const sendManagerEmail = (
    sendEmailReq: SendEmailReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<SendManagerEmailResData>(
      {url: `/manager/managers/captcha/send`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sendEmailReq
    },
      options);
    }
  


export const getSendManagerEmailMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendManagerEmail>>, TError,{data: SendEmailReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof sendManagerEmail>>, TError,{data: SendEmailReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendManagerEmail>>, {data: SendEmailReq}> = (props) => {
          const {data} = props ?? {};

          return  sendManagerEmail(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type SendManagerEmailMutationResult = NonNullable<Awaited<ReturnType<typeof sendManagerEmail>>>
    export type SendManagerEmailMutationBody = SendEmailReq
    export type SendManagerEmailMutationError = ErrorType<unknown>

    /**
 * @summary send manager email
 */
export const useSendManagerEmail = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendManagerEmail>>, TError,{data: SendEmailReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getSendManagerEmailMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * verify manager email
 * @summary verify manager email
 */
export const verifyManagerEmail = (
    emailRow: EmailRow,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/managers/captcha/verify`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: emailRow
    },
      options);
    }
  


export const getVerifyManagerEmailMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyManagerEmail>>, TError,{data: EmailRow}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof verifyManagerEmail>>, TError,{data: EmailRow}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyManagerEmail>>, {data: EmailRow}> = (props) => {
          const {data} = props ?? {};

          return  verifyManagerEmail(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type VerifyManagerEmailMutationResult = NonNullable<Awaited<ReturnType<typeof verifyManagerEmail>>>
    export type VerifyManagerEmailMutationBody = EmailRow
    export type VerifyManagerEmailMutationError = ErrorType<unknown>

    /**
 * @summary verify manager email
 */
export const useVerifyManagerEmail = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyManagerEmail>>, TError,{data: EmailRow}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getVerifyManagerEmailMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get manager info by token
 * @summary get manager info by token
 */
export const getManagerInfoByToken = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ManagerInfoWithTokenData>(
      {url: `/manager/managers/info`, method: 'get', signal
    },
      options);
    }
  

export const getGetManagerInfoByTokenQueryKey = () => [`/manager/managers/info`] as const;
  

    
export const getGetManagerInfoByTokenQueryOptions = <TData = Awaited<ReturnType<typeof getManagerInfoByToken>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerInfoByToken>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getManagerInfoByToken>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetManagerInfoByTokenQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getManagerInfoByToken>>> = ({ signal }) => getManagerInfoByToken(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetManagerInfoByTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getManagerInfoByToken>>>
export type GetManagerInfoByTokenQueryError = ErrorType<unknown>

/**
 * @summary get manager info by token
 */
export const useGetManagerInfoByToken = <TData = Awaited<ReturnType<typeof getManagerInfoByToken>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerInfoByToken>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetManagerInfoByTokenQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update manager info
 * @summary update manager info
 */
export const updateManagerInfo = (
    managerInfoUpdate: ManagerInfoUpdate,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/managers/info`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: managerInfoUpdate
    },
      options);
    }
  


export const getUpdateManagerInfoMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateManagerInfo>>, TError,{data: ManagerInfoUpdate}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateManagerInfo>>, TError,{data: ManagerInfoUpdate}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateManagerInfo>>, {data: ManagerInfoUpdate}> = (props) => {
          const {data} = props ?? {};

          return  updateManagerInfo(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateManagerInfoMutationResult = NonNullable<Awaited<ReturnType<typeof updateManagerInfo>>>
    export type UpdateManagerInfoMutationBody = ManagerInfoUpdate
    export type UpdateManagerInfoMutationError = ErrorType<unknown>

    /**
 * @summary update manager info
 */
export const useUpdateManagerInfo = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateManagerInfo>>, TError,{data: ManagerInfoUpdate}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateManagerInfoMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * manager sign in
 * @summary manager sign in
 */
export const managersSignIn = (
    managerSignIn: ManagerSignIn,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/managers/signIn`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: managerSignIn
    },
      options);
    }
  


export const getManagersSignInMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof managersSignIn>>, TError,{data: ManagerSignIn}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof managersSignIn>>, TError,{data: ManagerSignIn}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof managersSignIn>>, {data: ManagerSignIn}> = (props) => {
          const {data} = props ?? {};

          return  managersSignIn(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ManagersSignInMutationResult = NonNullable<Awaited<ReturnType<typeof managersSignIn>>>
    export type ManagersSignInMutationBody = ManagerSignIn
    export type ManagersSignInMutationError = ErrorType<unknown>

    /**
 * @summary manager sign in
 */
export const useManagersSignIn = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof managersSignIn>>, TError,{data: ManagerSignIn}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getManagersSignInMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get activity limit
 * @summary get activity limit
 */
export const getActivityLimit = (
    params?: GetActivityLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ActivityRes>(
      {url: `/manager/market/activity`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetActivityLimitQueryKey = (params?: GetActivityLimitParams,) => [`/manager/market/activity`, ...(params ? [params]: [])] as const;
  

    
export const getGetActivityLimitQueryOptions = <TData = Awaited<ReturnType<typeof getActivityLimit>>, TError = ErrorType<unknown>>(params?: GetActivityLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getActivityLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getActivityLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActivityLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActivityLimit>>> = ({ signal }) => getActivityLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetActivityLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getActivityLimit>>>
export type GetActivityLimitQueryError = ErrorType<unknown>

/**
 * @summary get activity limit
 */
export const useGetActivityLimit = <TData = Awaited<ReturnType<typeof getActivityLimit>>, TError = ErrorType<unknown>>(
 params?: GetActivityLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getActivityLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetActivityLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * delete activity
 * @summary delete activity
 */
export const deleteActivity = (
    params: DeleteActivityParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/activity`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteActivityMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActivity>>, TError,{params: DeleteActivityParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteActivity>>, TError,{params: DeleteActivityParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteActivity>>, {params: DeleteActivityParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteActivity(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteActivityMutationResult = NonNullable<Awaited<ReturnType<typeof deleteActivity>>>
    
    export type DeleteActivityMutationError = ErrorType<unknown>

    /**
 * @summary delete activity
 */
export const useDeleteActivity = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActivity>>, TError,{params: DeleteActivityParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteActivityMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * update activity base (step1)
 * @summary update activity base (step1)
 */
export const updateActivityBase = (
    activityUpdateStepOneReq: ActivityUpdateStepOneReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResponseU64>(
      {url: `/manager/market/activity/base`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activityUpdateStepOneReq
    },
      options);
    }
  


export const getUpdateActivityBaseMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActivityBase>>, TError,{data: ActivityUpdateStepOneReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateActivityBase>>, TError,{data: ActivityUpdateStepOneReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateActivityBase>>, {data: ActivityUpdateStepOneReq}> = (props) => {
          const {data} = props ?? {};

          return  updateActivityBase(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateActivityBaseMutationResult = NonNullable<Awaited<ReturnType<typeof updateActivityBase>>>
    export type UpdateActivityBaseMutationBody = ActivityUpdateStepOneReq
    export type UpdateActivityBaseMutationError = ErrorType<unknown>

    /**
 * @summary update activity base (step1)
 */
export const useUpdateActivityBase = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActivityBase>>, TError,{data: ActivityUpdateStepOneReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateActivityBaseMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get activity detail
 * @summary get activity detail
 */
export const getActivityDetail = (
    params: GetActivityDetailParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ActivityDetailRes>(
      {url: `/manager/market/activity/detail`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetActivityDetailQueryKey = (params: GetActivityDetailParams,) => [`/manager/market/activity/detail`, ...(params ? [params]: [])] as const;
  

    
export const getGetActivityDetailQueryOptions = <TData = Awaited<ReturnType<typeof getActivityDetail>>, TError = ErrorType<unknown>>(params: GetActivityDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getActivityDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getActivityDetail>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActivityDetailQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActivityDetail>>> = ({ signal }) => getActivityDetail(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetActivityDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getActivityDetail>>>
export type GetActivityDetailQueryError = ErrorType<unknown>

/**
 * @summary get activity detail
 */
export const useGetActivityDetail = <TData = Awaited<ReturnType<typeof getActivityDetail>>, TError = ErrorType<unknown>>(
 params: GetActivityDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getActivityDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetActivityDetailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const getActivityGoodsLimit = (
    params: GetActivityGoodsLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ActivityGoodsRes>(
      {url: `/manager/market/activity/goods`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetActivityGoodsLimitQueryKey = (params: GetActivityGoodsLimitParams,) => [`/manager/market/activity/goods`, ...(params ? [params]: [])] as const;
  

    
export const getGetActivityGoodsLimitQueryOptions = <TData = Awaited<ReturnType<typeof getActivityGoodsLimit>>, TError = ErrorType<unknown>>(params: GetActivityGoodsLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getActivityGoodsLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getActivityGoodsLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActivityGoodsLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getActivityGoodsLimit>>> = ({ signal }) => getActivityGoodsLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetActivityGoodsLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getActivityGoodsLimit>>>
export type GetActivityGoodsLimitQueryError = ErrorType<unknown>

export const useGetActivityGoodsLimit = <TData = Awaited<ReturnType<typeof getActivityGoodsLimit>>, TError = ErrorType<unknown>>(
 params: GetActivityGoodsLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getActivityGoodsLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetActivityGoodsLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update activity bundle goods
 * @summary update activity bundle goods
 */
export const updateActivityBundleGoods = (
    activityBundleInsertGoodsReq: ActivityBundleInsertGoodsReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/activity/goods/bundle`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activityBundleInsertGoodsReq
    },
      options);
    }
  


export const getUpdateActivityBundleGoodsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActivityBundleGoods>>, TError,{data: ActivityBundleInsertGoodsReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateActivityBundleGoods>>, TError,{data: ActivityBundleInsertGoodsReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateActivityBundleGoods>>, {data: ActivityBundleInsertGoodsReq}> = (props) => {
          const {data} = props ?? {};

          return  updateActivityBundleGoods(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateActivityBundleGoodsMutationResult = NonNullable<Awaited<ReturnType<typeof updateActivityBundleGoods>>>
    export type UpdateActivityBundleGoodsMutationBody = ActivityBundleInsertGoodsReq
    export type UpdateActivityBundleGoodsMutationError = ErrorType<unknown>

    /**
 * @summary update activity bundle goods
 */
export const useUpdateActivityBundleGoods = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActivityBundleGoods>>, TError,{data: ActivityBundleInsertGoodsReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateActivityBundleGoodsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete activity goods bundle
 * @summary delete activity goods bundle
 */
export const deleteActivityGoodsBundle = (
    params: DeleteActivityGoodsBundleParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/activity/goods/bundle`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteActivityGoodsBundleMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActivityGoodsBundle>>, TError,{params: DeleteActivityGoodsBundleParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteActivityGoodsBundle>>, TError,{params: DeleteActivityGoodsBundleParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteActivityGoodsBundle>>, {params: DeleteActivityGoodsBundleParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteActivityGoodsBundle(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteActivityGoodsBundleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteActivityGoodsBundle>>>
    
    export type DeleteActivityGoodsBundleMutationError = ErrorType<unknown>

    /**
 * @summary delete activity goods bundle
 */
export const useDeleteActivityGoodsBundle = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActivityGoodsBundle>>, TError,{params: DeleteActivityGoodsBundleParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteActivityGoodsBundleMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * update activity promotion goods
 * @summary update activity promotion goods
 */
export const updateActivityPromotionGoods = (
    activityPromotionUpdateGoodsReq: ActivityPromotionUpdateGoodsReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/activity/goods/promotion`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activityPromotionUpdateGoodsReq
    },
      options);
    }
  


export const getUpdateActivityPromotionGoodsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActivityPromotionGoods>>, TError,{data: ActivityPromotionUpdateGoodsReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateActivityPromotionGoods>>, TError,{data: ActivityPromotionUpdateGoodsReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateActivityPromotionGoods>>, {data: ActivityPromotionUpdateGoodsReq}> = (props) => {
          const {data} = props ?? {};

          return  updateActivityPromotionGoods(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateActivityPromotionGoodsMutationResult = NonNullable<Awaited<ReturnType<typeof updateActivityPromotionGoods>>>
    export type UpdateActivityPromotionGoodsMutationBody = ActivityPromotionUpdateGoodsReq
    export type UpdateActivityPromotionGoodsMutationError = ErrorType<unknown>

    /**
 * @summary update activity promotion goods
 */
export const useUpdateActivityPromotionGoods = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActivityPromotionGoods>>, TError,{data: ActivityPromotionUpdateGoodsReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateActivityPromotionGoodsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteActivityGoodsPromotion = (
    params: DeleteActivityGoodsPromotionParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/activity/goods/promotion`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteActivityGoodsPromotionMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActivityGoodsPromotion>>, TError,{params: DeleteActivityGoodsPromotionParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteActivityGoodsPromotion>>, TError,{params: DeleteActivityGoodsPromotionParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteActivityGoodsPromotion>>, {params: DeleteActivityGoodsPromotionParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteActivityGoodsPromotion(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteActivityGoodsPromotionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteActivityGoodsPromotion>>>
    
    export type DeleteActivityGoodsPromotionMutationError = ErrorType<unknown>

    export const useDeleteActivityGoodsPromotion = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteActivityGoodsPromotion>>, TError,{params: DeleteActivityGoodsPromotionParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteActivityGoodsPromotionMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * update activity info (step2)
 * @summary update activity info (step2)
 */
export const updateActivityInfo = (
    activityUpdateStepTwoReq: ActivityUpdateStepTwoReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/activity/info`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: activityUpdateStepTwoReq
    },
      options);
    }
  


export const getUpdateActivityInfoMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActivityInfo>>, TError,{data: ActivityUpdateStepTwoReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateActivityInfo>>, TError,{data: ActivityUpdateStepTwoReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateActivityInfo>>, {data: ActivityUpdateStepTwoReq}> = (props) => {
          const {data} = props ?? {};

          return  updateActivityInfo(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateActivityInfoMutationResult = NonNullable<Awaited<ReturnType<typeof updateActivityInfo>>>
    export type UpdateActivityInfoMutationBody = ActivityUpdateStepTwoReq
    export type UpdateActivityInfoMutationError = ErrorType<unknown>

    /**
 * @summary update activity info (step2)
 */
export const useUpdateActivityInfo = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateActivityInfo>>, TError,{data: ActivityUpdateStepTwoReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateActivityInfoMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get carousel
 * @summary get carousel
 */
export const getCarousel = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<MarketCarouselRes>(
      {url: `/manager/market/decoration/carousel`, method: 'get', signal
    },
      options);
    }
  

export const getGetCarouselQueryKey = () => [`/manager/market/decoration/carousel`] as const;
  

    
export const getGetCarouselQueryOptions = <TData = Awaited<ReturnType<typeof getCarousel>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCarousel>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCarousel>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCarouselQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCarousel>>> = ({ signal }) => getCarousel(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCarouselQueryResult = NonNullable<Awaited<ReturnType<typeof getCarousel>>>
export type GetCarouselQueryError = ErrorType<unknown>

/**
 * @summary get carousel
 */
export const useGetCarousel = <TData = Awaited<ReturnType<typeof getCarousel>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCarousel>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCarouselQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update carousel
 * @summary update carousel
 */
export const updateCarousel = (
    updateCarouselReq: UpdateCarouselReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/decoration/carousel`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateCarouselReq
    },
      options);
    }
  


export const getUpdateCarouselMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCarousel>>, TError,{data: UpdateCarouselReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCarousel>>, TError,{data: UpdateCarouselReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCarousel>>, {data: UpdateCarouselReq}> = (props) => {
          const {data} = props ?? {};

          return  updateCarousel(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateCarouselMutationResult = NonNullable<Awaited<ReturnType<typeof updateCarousel>>>
    export type UpdateCarouselMutationBody = UpdateCarouselReq
    export type UpdateCarouselMutationError = ErrorType<unknown>

    /**
 * @summary update carousel
 */
export const useUpdateCarousel = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCarousel>>, TError,{data: UpdateCarouselReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateCarouselMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete carousel
 * @summary delete carousel
 */
export const deleteCarousel = (
    params: DeleteCarouselParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/decoration/carousel`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteCarouselMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCarousel>>, TError,{params: DeleteCarouselParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCarousel>>, TError,{params: DeleteCarouselParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCarousel>>, {params: DeleteCarouselParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteCarousel(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteCarouselMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCarousel>>>
    
    export type DeleteCarouselMutationError = ErrorType<unknown>

    /**
 * @summary delete carousel
 */
export const useDeleteCarousel = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCarousel>>, TError,{params: DeleteCarouselParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteCarouselMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get hotActivity
 * @summary get hotActivity
 */
export const getHotActivity = (
    params?: GetHotActivityParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<MarketHotActivityRes>(
      {url: `/manager/market/decoration/hotActivity`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetHotActivityQueryKey = (params?: GetHotActivityParams,) => [`/manager/market/decoration/hotActivity`, ...(params ? [params]: [])] as const;
  

    
export const getGetHotActivityQueryOptions = <TData = Awaited<ReturnType<typeof getHotActivity>>, TError = ErrorType<unknown>>(params?: GetHotActivityParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getHotActivity>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getHotActivity>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHotActivityQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHotActivity>>> = ({ signal }) => getHotActivity(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetHotActivityQueryResult = NonNullable<Awaited<ReturnType<typeof getHotActivity>>>
export type GetHotActivityQueryError = ErrorType<unknown>

/**
 * @summary get hotActivity
 */
export const useGetHotActivity = <TData = Awaited<ReturnType<typeof getHotActivity>>, TError = ErrorType<unknown>>(
 params?: GetHotActivityParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getHotActivity>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetHotActivityQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update hotActivity
 * @summary update hotActivity
 */
export const updateHotActivity = (
    updateHotActivityReq: UpdateHotActivityReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/decoration/hotActivity`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateHotActivityReq
    },
      options);
    }
  


export const getUpdateHotActivityMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHotActivity>>, TError,{data: UpdateHotActivityReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateHotActivity>>, TError,{data: UpdateHotActivityReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateHotActivity>>, {data: UpdateHotActivityReq}> = (props) => {
          const {data} = props ?? {};

          return  updateHotActivity(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateHotActivityMutationResult = NonNullable<Awaited<ReturnType<typeof updateHotActivity>>>
    export type UpdateHotActivityMutationBody = UpdateHotActivityReq
    export type UpdateHotActivityMutationError = ErrorType<unknown>

    /**
 * @summary update hotActivity
 */
export const useUpdateHotActivity = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateHotActivity>>, TError,{data: UpdateHotActivityReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateHotActivityMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete hotActivity
 * @summary delete hotActivity
 */
export const deleteHotActivity = (
    params: DeleteHotActivityParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/decoration/hotActivity`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteHotActivityMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHotActivity>>, TError,{params: DeleteHotActivityParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteHotActivity>>, TError,{params: DeleteHotActivityParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteHotActivity>>, {params: DeleteHotActivityParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteHotActivity(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteHotActivityMutationResult = NonNullable<Awaited<ReturnType<typeof deleteHotActivity>>>
    
    export type DeleteHotActivityMutationError = ErrorType<unknown>

    /**
 * @summary delete hotActivity
 */
export const useDeleteHotActivity = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteHotActivity>>, TError,{params: DeleteHotActivityParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteHotActivityMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get market news
 * @summary get market news
 */
export const getNews = (
    params?: GetNewsParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<MarketNewsLimitRes>(
      {url: `/manager/market/decoration/news`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetNewsQueryKey = (params?: GetNewsParams,) => [`/manager/market/decoration/news`, ...(params ? [params]: [])] as const;
  

    
export const getGetNewsQueryOptions = <TData = Awaited<ReturnType<typeof getNews>>, TError = ErrorType<unknown>>(params?: GetNewsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getNews>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getNews>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNewsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNews>>> = ({ signal }) => getNews(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetNewsQueryResult = NonNullable<Awaited<ReturnType<typeof getNews>>>
export type GetNewsQueryError = ErrorType<unknown>

/**
 * @summary get market news
 */
export const useGetNews = <TData = Awaited<ReturnType<typeof getNews>>, TError = ErrorType<unknown>>(
 params?: GetNewsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getNews>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetNewsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update market news
 * @summary update market news
 */
export const updateNews = (
    updateNewsReq: UpdateNewsReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/decoration/news`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateNewsReq
    },
      options);
    }
  


export const getUpdateNewsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateNews>>, TError,{data: UpdateNewsReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateNews>>, TError,{data: UpdateNewsReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateNews>>, {data: UpdateNewsReq}> = (props) => {
          const {data} = props ?? {};

          return  updateNews(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateNewsMutationResult = NonNullable<Awaited<ReturnType<typeof updateNews>>>
    export type UpdateNewsMutationBody = UpdateNewsReq
    export type UpdateNewsMutationError = ErrorType<unknown>

    /**
 * @summary update market news
 */
export const useUpdateNews = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateNews>>, TError,{data: UpdateNewsReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateNewsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete market news
 * @summary delete market news
 */
export const deleteNews = (
    params: DeleteNewsParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/market/decoration/news`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteNewsMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNews>>, TError,{params: DeleteNewsParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteNews>>, TError,{params: DeleteNewsParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteNews>>, {params: DeleteNewsParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteNews(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteNewsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteNews>>>
    
    export type DeleteNewsMutationError = ErrorType<unknown>

    /**
 * @summary delete market news
 */
export const useDeleteNews = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNews>>, TError,{params: DeleteNewsParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteNewsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get images limit
 * @summary get images limit
 */
export const getImages = (
    params?: GetImagesParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<MaterialImageRes>(
      {url: `/manager/materialLibrary/image`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetImagesQueryKey = (params?: GetImagesParams,) => [`/manager/materialLibrary/image`, ...(params ? [params]: [])] as const;
  

    
export const getGetImagesQueryOptions = <TData = Awaited<ReturnType<typeof getImages>>, TError = ErrorType<unknown>>(params?: GetImagesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetImagesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getImages>>> = ({ signal }) => getImages(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetImagesQueryResult = NonNullable<Awaited<ReturnType<typeof getImages>>>
export type GetImagesQueryError = ErrorType<unknown>

/**
 * @summary get images limit
 */
export const useGetImages = <TData = Awaited<ReturnType<typeof getImages>>, TError = ErrorType<unknown>>(
 params?: GetImagesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetImagesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * create image material
 * @summary create image material
 */
export const createImage = (
    updateImageObjectReq: UpdateImageObjectReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/materialLibrary/image`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateImageObjectReq
    },
      options);
    }
  


export const getCreateImageMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createImage>>, TError,{data: UpdateImageObjectReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof createImage>>, TError,{data: UpdateImageObjectReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createImage>>, {data: UpdateImageObjectReq}> = (props) => {
          const {data} = props ?? {};

          return  createImage(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type CreateImageMutationResult = NonNullable<Awaited<ReturnType<typeof createImage>>>
    export type CreateImageMutationBody = UpdateImageObjectReq
    export type CreateImageMutationError = ErrorType<unknown>

    /**
 * @summary create image material
 */
export const useCreateImage = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createImage>>, TError,{data: UpdateImageObjectReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getCreateImageMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete image material
 * @summary delete image material
 */
export const deleteImage = (
    params: DeleteImageParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/materialLibrary/image`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteImageMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteImage>>, TError,{params: DeleteImageParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteImage>>, TError,{params: DeleteImageParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteImage>>, {params: DeleteImageParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteImage(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteImageMutationResult = NonNullable<Awaited<ReturnType<typeof deleteImage>>>
    
    export type DeleteImageMutationError = ErrorType<unknown>

    /**
 * @summary delete image material
 */
export const useDeleteImage = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteImage>>, TError,{params: DeleteImageParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteImageMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * batch delete images
 * @summary batch delete images
 */
export const batchDeleteImages = (
    batchDeleteMaterialImagesReq: BatchDeleteMaterialImagesReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/materialLibrary/image/batchDelete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: batchDeleteMaterialImagesReq
    },
      options);
    }
  


export const getBatchDeleteImagesMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchDeleteImages>>, TError,{data: BatchDeleteMaterialImagesReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof batchDeleteImages>>, TError,{data: BatchDeleteMaterialImagesReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof batchDeleteImages>>, {data: BatchDeleteMaterialImagesReq}> = (props) => {
          const {data} = props ?? {};

          return  batchDeleteImages(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type BatchDeleteImagesMutationResult = NonNullable<Awaited<ReturnType<typeof batchDeleteImages>>>
    export type BatchDeleteImagesMutationBody = BatchDeleteMaterialImagesReq
    export type BatchDeleteImagesMutationError = ErrorType<unknown>

    /**
 * @summary batch delete images
 */
export const useBatchDeleteImages = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof batchDeleteImages>>, TError,{data: BatchDeleteMaterialImagesReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getBatchDeleteImagesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * permission limit
 * @summary permission limit
 */
export const getPermission = (
    params?: GetPermissionParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<PermissionLimitRes>(
      {url: `/manager/permission`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetPermissionQueryKey = (params?: GetPermissionParams,) => [`/manager/permission`, ...(params ? [params]: [])] as const;
  

    
export const getGetPermissionQueryOptions = <TData = Awaited<ReturnType<typeof getPermission>>, TError = ErrorType<unknown>>(params?: GetPermissionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPermission>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getPermission>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPermissionQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPermission>>> = ({ signal }) => getPermission(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetPermissionQueryResult = NonNullable<Awaited<ReturnType<typeof getPermission>>>
export type GetPermissionQueryError = ErrorType<unknown>

/**
 * @summary permission limit
 */
export const useGetPermission = <TData = Awaited<ReturnType<typeof getPermission>>, TError = ErrorType<unknown>>(
 params?: GetPermissionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPermission>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPermissionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * permission update
 * @summary permission update
 */
export const updatePermission = (
    updatePermissionBody: UpdatePermissionBody,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/permission`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updatePermissionBody
    },
      options);
    }
  


export const getUpdatePermissionMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePermission>>, TError,{data: UpdatePermissionBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePermission>>, TError,{data: UpdatePermissionBody}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePermission>>, {data: UpdatePermissionBody}> = (props) => {
          const {data} = props ?? {};

          return  updatePermission(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdatePermissionMutationResult = NonNullable<Awaited<ReturnType<typeof updatePermission>>>
    export type UpdatePermissionMutationBody = UpdatePermissionBody
    export type UpdatePermissionMutationError = ErrorType<unknown>

    /**
 * @summary permission update
 */
export const useUpdatePermission = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePermission>>, TError,{data: UpdatePermissionBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdatePermissionMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * permission delete
 * @summary permission delete
 */
export const deletePermission = (
    params: DeletePermissionParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/permission`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeletePermissionMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePermission>>, TError,{params: DeletePermissionParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePermission>>, TError,{params: DeletePermissionParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePermission>>, {params: DeletePermissionParams}> = (props) => {
          const {params} = props ?? {};

          return  deletePermission(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeletePermissionMutationResult = NonNullable<Awaited<ReturnType<typeof deletePermission>>>
    
    export type DeletePermissionMutationError = ErrorType<unknown>

    /**
 * @summary permission delete
 */
export const useDeletePermission = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePermission>>, TError,{params: DeletePermissionParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeletePermissionMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get manager roles
 * @summary get manager roles
 */
export const getManagerRoles = (
    params?: GetManagerRolesParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ManagerRoleRes>(
      {url: `/manager/role`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetManagerRolesQueryKey = (params?: GetManagerRolesParams,) => [`/manager/role`, ...(params ? [params]: [])] as const;
  

    
export const getGetManagerRolesQueryOptions = <TData = Awaited<ReturnType<typeof getManagerRoles>>, TError = ErrorType<unknown>>(params?: GetManagerRolesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerRoles>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getManagerRoles>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetManagerRolesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getManagerRoles>>> = ({ signal }) => getManagerRoles(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetManagerRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getManagerRoles>>>
export type GetManagerRolesQueryError = ErrorType<unknown>

/**
 * @summary get manager roles
 */
export const useGetManagerRoles = <TData = Awaited<ReturnType<typeof getManagerRoles>>, TError = ErrorType<unknown>>(
 params?: GetManagerRolesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerRoles>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetManagerRolesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update manager role
 * @summary update manager role
 */
export const updateManagerRole = (
    managerRoleUpdateReq: ManagerRoleUpdateReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/role`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: managerRoleUpdateReq
    },
      options);
    }
  


export const getUpdateManagerRoleMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateManagerRole>>, TError,{data: ManagerRoleUpdateReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateManagerRole>>, TError,{data: ManagerRoleUpdateReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateManagerRole>>, {data: ManagerRoleUpdateReq}> = (props) => {
          const {data} = props ?? {};

          return  updateManagerRole(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateManagerRoleMutationResult = NonNullable<Awaited<ReturnType<typeof updateManagerRole>>>
    export type UpdateManagerRoleMutationBody = ManagerRoleUpdateReq
    export type UpdateManagerRoleMutationError = ErrorType<unknown>

    /**
 * @summary update manager role
 */
export const useUpdateManagerRole = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateManagerRole>>, TError,{data: ManagerRoleUpdateReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateManagerRoleMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete manager roles
 * @summary delete manager roles
 */
export const deleteManagerRole = (
    params: DeleteManagerRoleParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/role`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteManagerRoleMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteManagerRole>>, TError,{params: DeleteManagerRoleParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteManagerRole>>, TError,{params: DeleteManagerRoleParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteManagerRole>>, {params: DeleteManagerRoleParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteManagerRole(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteManagerRoleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteManagerRole>>>
    
    export type DeleteManagerRoleMutationError = ErrorType<unknown>

    /**
 * @summary delete manager roles
 */
export const useDeleteManagerRole = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteManagerRole>>, TError,{params: DeleteManagerRoleParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteManagerRoleMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get role audit limit
 * @summary get role audit limit
 */
export const getRoleAuditLimit = (
    params?: GetRoleAuditLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<RoleAuditRowRes>(
      {url: `/manager/role/audit`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRoleAuditLimitQueryKey = (params?: GetRoleAuditLimitParams,) => [`/manager/role/audit`, ...(params ? [params]: [])] as const;
  

    
export const getGetRoleAuditLimitQueryOptions = <TData = Awaited<ReturnType<typeof getRoleAuditLimit>>, TError = ErrorType<unknown>>(params?: GetRoleAuditLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoleAuditLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getRoleAuditLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRoleAuditLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoleAuditLimit>>> = ({ signal }) => getRoleAuditLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetRoleAuditLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getRoleAuditLimit>>>
export type GetRoleAuditLimitQueryError = ErrorType<unknown>

/**
 * @summary get role audit limit
 */
export const useGetRoleAuditLimit = <TData = Awaited<ReturnType<typeof getRoleAuditLimit>>, TError = ErrorType<unknown>>(
 params?: GetRoleAuditLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRoleAuditLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRoleAuditLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * audit role apply
 * @summary audit role apply
 */
export const auditRoleApply = (
    roleAuditReq: RoleAuditReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/role/audit`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: roleAuditReq
    },
      options);
    }
  


export const getAuditRoleApplyMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof auditRoleApply>>, TError,{data: RoleAuditReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof auditRoleApply>>, TError,{data: RoleAuditReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof auditRoleApply>>, {data: RoleAuditReq}> = (props) => {
          const {data} = props ?? {};

          return  auditRoleApply(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type AuditRoleApplyMutationResult = NonNullable<Awaited<ReturnType<typeof auditRoleApply>>>
    export type AuditRoleApplyMutationBody = RoleAuditReq
    export type AuditRoleApplyMutationError = ErrorType<unknown>

    /**
 * @summary audit role apply
 */
export const useAuditRoleApply = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof auditRoleApply>>, TError,{data: RoleAuditReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getAuditRoleApplyMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete role audit
 * @summary delete role audit
 */
export const deleteRoleAudit = (
    params: DeleteRoleAuditParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/role/audit`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteRoleAuditMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoleAudit>>, TError,{params: DeleteRoleAuditParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRoleAudit>>, TError,{params: DeleteRoleAuditParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRoleAudit>>, {params: DeleteRoleAuditParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteRoleAudit(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteRoleAuditMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRoleAudit>>>
    
    export type DeleteRoleAuditMutationError = ErrorType<unknown>

    /**
 * @summary delete role audit
 */
export const useDeleteRoleAudit = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRoleAudit>>, TError,{params: DeleteRoleAuditParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteRoleAuditMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * create role apply
 * @summary create role apply
 */
export const createRoleAudit = (
    applyRoleReq: ApplyRoleReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/role/audit/apply`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: applyRoleReq
    },
      options);
    }
  


export const getCreateRoleAuditMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRoleAudit>>, TError,{data: ApplyRoleReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof createRoleAudit>>, TError,{data: ApplyRoleReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRoleAudit>>, {data: ApplyRoleReq}> = (props) => {
          const {data} = props ?? {};

          return  createRoleAudit(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type CreateRoleAuditMutationResult = NonNullable<Awaited<ReturnType<typeof createRoleAudit>>>
    export type CreateRoleAuditMutationBody = ApplyRoleReq
    export type CreateRoleAuditMutationError = ErrorType<unknown>

    /**
 * @summary create role apply
 */
export const useCreateRoleAudit = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRoleAudit>>, TError,{data: ApplyRoleReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getCreateRoleAuditMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get current role audit detail by token
 * @summary get current role audit detail by token
 */
export const getCurrentRoleAudit = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<CurrentRoleAuditRes>(
      {url: `/manager/role/audit/current`, method: 'get', signal
    },
      options);
    }
  

export const getGetCurrentRoleAuditQueryKey = () => [`/manager/role/audit/current`] as const;
  

    
export const getGetCurrentRoleAuditQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentRoleAudit>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCurrentRoleAudit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCurrentRoleAudit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentRoleAuditQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentRoleAudit>>> = ({ signal }) => getCurrentRoleAudit(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCurrentRoleAuditQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentRoleAudit>>>
export type GetCurrentRoleAuditQueryError = ErrorType<unknown>

/**
 * @summary get current role audit detail by token
 */
export const useGetCurrentRoleAudit = <TData = Awaited<ReturnType<typeof getCurrentRoleAudit>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCurrentRoleAudit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCurrentRoleAuditQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get manager role permissions with permission status
 * @summary get manager role permissions with permission status
 */
export const getManagerRolePermissions = (
    params: GetManagerRolePermissionsParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ManagerRolePermissionRowRes>(
      {url: `/manager/role/permission`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetManagerRolePermissionsQueryKey = (params: GetManagerRolePermissionsParams,) => [`/manager/role/permission`, ...(params ? [params]: [])] as const;
  

    
export const getGetManagerRolePermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getManagerRolePermissions>>, TError = ErrorType<unknown>>(params: GetManagerRolePermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerRolePermissions>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getManagerRolePermissions>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetManagerRolePermissionsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getManagerRolePermissions>>> = ({ signal }) => getManagerRolePermissions(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetManagerRolePermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getManagerRolePermissions>>>
export type GetManagerRolePermissionsQueryError = ErrorType<unknown>

/**
 * @summary get manager role permissions with permission status
 */
export const useGetManagerRolePermissions = <TData = Awaited<ReturnType<typeof getManagerRolePermissions>>, TError = ErrorType<unknown>>(
 params: GetManagerRolePermissionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerRolePermissions>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetManagerRolePermissionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * change role permission status
 * @summary change role permission status
 */
export const changeRolePermissionStatus = (
    managerRolePermissionStatusReq: ManagerRolePermissionStatusReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/role/permission`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: managerRolePermissionStatusReq
    },
      options);
    }
  


export const getChangeRolePermissionStatusMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeRolePermissionStatus>>, TError,{data: ManagerRolePermissionStatusReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof changeRolePermissionStatus>>, TError,{data: ManagerRolePermissionStatusReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeRolePermissionStatus>>, {data: ManagerRolePermissionStatusReq}> = (props) => {
          const {data} = props ?? {};

          return  changeRolePermissionStatus(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ChangeRolePermissionStatusMutationResult = NonNullable<Awaited<ReturnType<typeof changeRolePermissionStatus>>>
    export type ChangeRolePermissionStatusMutationBody = ManagerRolePermissionStatusReq
    export type ChangeRolePermissionStatusMutationError = ErrorType<unknown>

    /**
 * @summary change role permission status
 */
export const useChangeRolePermissionStatus = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeRolePermissionStatus>>, TError,{data: ManagerRolePermissionStatusReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getChangeRolePermissionStatusMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get manager role router with router status
 * @summary get manager role router with router status
 */
export const getManagerRoleRouter = (
    params: GetManagerRoleRouterParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<ManagerRoleRouterRowRes>(
      {url: `/manager/role/router`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetManagerRoleRouterQueryKey = (params: GetManagerRoleRouterParams,) => [`/manager/role/router`, ...(params ? [params]: [])] as const;
  

    
export const getGetManagerRoleRouterQueryOptions = <TData = Awaited<ReturnType<typeof getManagerRoleRouter>>, TError = ErrorType<unknown>>(params: GetManagerRoleRouterParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerRoleRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getManagerRoleRouter>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetManagerRoleRouterQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getManagerRoleRouter>>> = ({ signal }) => getManagerRoleRouter(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetManagerRoleRouterQueryResult = NonNullable<Awaited<ReturnType<typeof getManagerRoleRouter>>>
export type GetManagerRoleRouterQueryError = ErrorType<unknown>

/**
 * @summary get manager role router with router status
 */
export const useGetManagerRoleRouter = <TData = Awaited<ReturnType<typeof getManagerRoleRouter>>, TError = ErrorType<unknown>>(
 params: GetManagerRoleRouterParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getManagerRoleRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetManagerRoleRouterQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * change role router status
 * @summary change role router status
 */
export const changeRoleRouterStatus = (
    managerRoleRouterStatusReq: ManagerRoleRouterStatusReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/role/router`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: managerRoleRouterStatusReq
    },
      options);
    }
  


export const getChangeRoleRouterStatusMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeRoleRouterStatus>>, TError,{data: ManagerRoleRouterStatusReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof changeRoleRouterStatus>>, TError,{data: ManagerRoleRouterStatusReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeRoleRouterStatus>>, {data: ManagerRoleRouterStatusReq}> = (props) => {
          const {data} = props ?? {};

          return  changeRoleRouterStatus(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type ChangeRoleRouterStatusMutationResult = NonNullable<Awaited<ReturnType<typeof changeRoleRouterStatus>>>
    export type ChangeRoleRouterStatusMutationBody = ManagerRoleRouterStatusReq
    export type ChangeRoleRouterStatusMutationError = ErrorType<unknown>

    /**
 * @summary change role router status
 */
export const useChangeRoleRouterStatus = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof changeRoleRouterStatus>>, TError,{data: ManagerRoleRouterStatusReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getChangeRoleRouterStatusMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get current manager role router
 * @summary get current manager role router
 */
export const getCurrentRoleRouter = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<RoutesVecRes>(
      {url: `/manager/role/router/current`, method: 'get', signal
    },
      options);
    }
  

export const getGetCurrentRoleRouterQueryKey = () => [`/manager/role/router/current`] as const;
  

    
export const getGetCurrentRoleRouterQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentRoleRouter>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCurrentRoleRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getCurrentRoleRouter>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentRoleRouterQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentRoleRouter>>> = ({ signal }) => getCurrentRoleRouter(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetCurrentRoleRouterQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentRoleRouter>>>
export type GetCurrentRoleRouterQueryError = ErrorType<unknown>

/**
 * @summary get current manager role router
 */
export const useGetCurrentRoleRouter = <TData = Awaited<ReturnType<typeof getCurrentRoleRouter>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCurrentRoleRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCurrentRoleRouterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get routes array
 * @summary get routes array
 */
export const getRouter = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<RoutesVecRes>(
      {url: `/manager/router`, method: 'get', signal
    },
      options);
    }
  

export const getGetRouterQueryKey = () => [`/manager/router`] as const;
  

    
export const getGetRouterQueryOptions = <TData = Awaited<ReturnType<typeof getRouter>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getRouter>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRouterQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRouter>>> = ({ signal }) => getRouter(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetRouterQueryResult = NonNullable<Awaited<ReturnType<typeof getRouter>>>
export type GetRouterQueryError = ErrorType<unknown>

/**
 * @summary get routes array
 */
export const useGetRouter = <TData = Awaited<ReturnType<typeof getRouter>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRouterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * update router
 * @summary update router
 */
export const updateRouter = (
    updateRouteReq: UpdateRouteReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/router`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: updateRouteReq
    },
      options);
    }
  


export const getUpdateRouterMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRouter>>, TError,{data: UpdateRouteReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateRouter>>, TError,{data: UpdateRouteReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRouter>>, {data: UpdateRouteReq}> = (props) => {
          const {data} = props ?? {};

          return  updateRouter(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UpdateRouterMutationResult = NonNullable<Awaited<ReturnType<typeof updateRouter>>>
    export type UpdateRouterMutationBody = UpdateRouteReq
    export type UpdateRouterMutationError = ErrorType<unknown>

    /**
 * @summary update router
 */
export const useUpdateRouter = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRouter>>, TError,{data: UpdateRouteReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUpdateRouterMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * delete router
 * @summary delete router
 */
export const deleteRouter = (
    params: DeleteRouterParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseU8>(
      {url: `/manager/router`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteRouterMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouter>>, TError,{params: DeleteRouterParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRouter>>, TError,{params: DeleteRouterParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRouter>>, {params: DeleteRouterParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteRouter(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteRouterMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRouter>>>
    
    export type DeleteRouterMutationError = ErrorType<unknown>

    /**
 * @summary delete router
 */
export const useDeleteRouter = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRouter>>, TError,{params: DeleteRouterParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteRouterMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get all menu
 * @summary get all menu
 */
export const getAllRouter = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<RoutesVecRes>(
      {url: `/manager/router/all`, method: 'get', signal
    },
      options);
    }
  

export const getGetAllRouterQueryKey = () => [`/manager/router/all`] as const;
  

    
export const getGetAllRouterQueryOptions = <TData = Awaited<ReturnType<typeof getAllRouter>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getAllRouter>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllRouterQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRouter>>> = ({ signal }) => getAllRouter(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAllRouterQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRouter>>>
export type GetAllRouterQueryError = ErrorType<unknown>

/**
 * @summary get all menu
 */
export const useGetAllRouter = <TData = Awaited<ReturnType<typeof getAllRouter>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllRouter>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllRouterQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get accessKey
 * @summary get accessKey
 */
export const getAccessKey = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<AccessKeyRes>(
      {url: `/manager/upload/accessKey`, method: 'get', signal
    },
      options);
    }
  

export const getGetAccessKeyQueryKey = () => [`/manager/upload/accessKey`] as const;
  

    
export const getGetAccessKeyQueryOptions = <TData = Awaited<ReturnType<typeof getAccessKey>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAccessKey>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getAccessKey>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAccessKeyQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccessKey>>> = ({ signal }) => getAccessKey(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAccessKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getAccessKey>>>
export type GetAccessKeyQueryError = ErrorType<unknown>

/**
 * @summary get accessKey
 */
export const useGetAccessKey = <TData = Awaited<ReturnType<typeof getAccessKey>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAccessKey>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAccessKeyQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * get custom user limit
 * @summary get custom user limit
 */
export const getUserLimit = (
    params?: GetUserLimitParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<UserRes>(
      {url: `/manager/user`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetUserLimitQueryKey = (params?: GetUserLimitParams,) => [`/manager/user`, ...(params ? [params]: [])] as const;
  

    
export const getGetUserLimitQueryOptions = <TData = Awaited<ReturnType<typeof getUserLimit>>, TError = ErrorType<unknown>>(params?: GetUserLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getUserLimit>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserLimitQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserLimit>>> = ({ signal }) => getUserLimit(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUserLimitQueryResult = NonNullable<Awaited<ReturnType<typeof getUserLimit>>>
export type GetUserLimitQueryError = ErrorType<unknown>

/**
 * @summary get custom user limit
 */
export const useGetUserLimit = <TData = Awaited<ReturnType<typeof getUserLimit>>, TError = ErrorType<unknown>>(
 params?: GetUserLimitParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserLimit>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserLimitQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * banned custom user
 * @summary banned custom user
 */
export const bannedUser = (
    bannedUser: BannedUser,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/user/banned`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: bannedUser
    },
      options);
    }
  


export const getBannedUserMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bannedUser>>, TError,{data: BannedUser}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof bannedUser>>, TError,{data: BannedUser}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bannedUser>>, {data: BannedUser}> = (props) => {
          const {data} = props ?? {};

          return  bannedUser(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type BannedUserMutationResult = NonNullable<Awaited<ReturnType<typeof bannedUser>>>
    export type BannedUserMutationBody = BannedUser
    export type BannedUserMutationError = ErrorType<unknown>

    /**
 * @summary banned custom user
 */
export const useBannedUser = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bannedUser>>, TError,{data: BannedUser}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getBannedUserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * unblock custom user
 * @summary unblock custom user
 */
export const unblockUser = (
    params: UnblockUserParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/user/banned`, method: 'delete',
        params
    },
      options);
    }
  


export const getUnblockUserMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unblockUser>>, TError,{params: UnblockUserParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof unblockUser>>, TError,{params: UnblockUserParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof unblockUser>>, {params: UnblockUserParams}> = (props) => {
          const {params} = props ?? {};

          return  unblockUser(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UnblockUserMutationResult = NonNullable<Awaited<ReturnType<typeof unblockUser>>>
    
    export type UnblockUserMutationError = ErrorType<unknown>

    /**
 * @summary unblock custom user
 */
export const useUnblockUser = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unblockUser>>, TError,{params: UnblockUserParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getUnblockUserMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * get custom user limit
 * @summary get custom user limit
 */
export const getUserDetail = (
    params: GetUserDetailParams,
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<UserDetailRes>(
      {url: `/manager/user/detail`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetUserDetailQueryKey = (params: GetUserDetailParams,) => [`/manager/user/detail`, ...(params ? [params]: [])] as const;
  

    
export const getGetUserDetailQueryOptions = <TData = Awaited<ReturnType<typeof getUserDetail>>, TError = ErrorType<unknown>>(params: GetUserDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof getUserDetail>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserDetailQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetail>>> = ({ signal }) => getUserDetail(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUserDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDetail>>>
export type GetUserDetailQueryError = ErrorType<unknown>

/**
 * @summary get custom user limit
 */
export const useGetUserDetail = <TData = Awaited<ReturnType<typeof getUserDetail>>, TError = ErrorType<unknown>>(
 params: GetUserDetailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserDetail>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserDetailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * send email
 * @summary send email
 */
export const sendEmail = (
    sendEmailReq: SendEmailReq,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/user/email/send`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: sendEmailReq
    },
      options);
    }
  


export const getSendEmailMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendEmail>>, TError,{data: SendEmailReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof sendEmail>>, TError,{data: SendEmailReq}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendEmail>>, {data: SendEmailReq}> = (props) => {
          const {data} = props ?? {};

          return  sendEmail(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type SendEmailMutationResult = NonNullable<Awaited<ReturnType<typeof sendEmail>>>
    export type SendEmailMutationBody = SendEmailReq
    export type SendEmailMutationError = ErrorType<unknown>

    /**
 * @summary send email
 */
export const useSendEmail = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendEmail>>, TError,{data: SendEmailReq}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getSendEmailMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * verify email
 * @summary verify email
 */
export const verifyEmail = (
    emailRow: EmailRow,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<ResPonseString>(
      {url: `/manager/user/email/verify`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: emailRow
    },
      options);
    }
  


export const getVerifyEmailMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyEmail>>, TError,{data: EmailRow}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof verifyEmail>>, TError,{data: EmailRow}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyEmail>>, {data: EmailRow}> = (props) => {
          const {data} = props ?? {};

          return  verifyEmail(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type VerifyEmailMutationResult = NonNullable<Awaited<ReturnType<typeof verifyEmail>>>
    export type VerifyEmailMutationBody = EmailRow
    export type VerifyEmailMutationError = ErrorType<unknown>

    /**
 * @summary verify email
 */
export const useVerifyEmail = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyEmail>>, TError,{data: EmailRow}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getVerifyEmailMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
