/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * bff
 * backend for frontend
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  DeleteManagerMaterialDelete200,
  DeleteManagerMaterialDeleteParams,
  PostManagerMaterialBatchDelete200,
  PostManagerMaterialBatchDeleteBody
} from './schema'
import { custom_instance } from './custom_instance';
import type { ErrorType } from './custom_instance';



// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * Welcome to swagger-jsdoc!
 */
export const get = (
    
 options?: SecondParameter<typeof custom_instance>,signal?: AbortSignal
) => {
      return custom_instance<void>(
      {url: `/`, method: 'get', signal
    },
      options);
    }
  

export const getGetQueryKey = () => [`/`] as const;
  

    
export const getGetQueryOptions = <TData = Awaited<ReturnType<typeof get>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}
): UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>
export type GetQueryError = ErrorType<unknown>

export const useGet = <TData = Awaited<ReturnType<typeof get>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>, request?: SecondParameter<typeof custom_instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * upload file
 */
export const post = (
    
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<void>(
      {url: `/`, method: 'post'
    },
      options);
    }
  


export const getPostMutationOptions = <TError = ErrorType<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof post>>, TError,TVariables, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof post>>, TError,TVariables, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof post>>, TVariables> = () => {
          

          return  post(requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostMutationResult = NonNullable<Awaited<ReturnType<typeof post>>>
    
    export type PostMutationError = ErrorType<unknown>

    export const usePost = <TError = ErrorType<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof post>>, TError,TVariables, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getPostMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * Âà†Èô§ÂõæÁâá
 */
export const deleteManagerMaterialDelete = (
    params: DeleteManagerMaterialDeleteParams,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<DeleteManagerMaterialDelete200>(
      {url: `/manager/material/delete`, method: 'delete',
        params
    },
      options);
    }
  


export const getDeleteManagerMaterialDeleteMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteManagerMaterialDelete>>, TError,{params: DeleteManagerMaterialDeleteParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteManagerMaterialDelete>>, TError,{params: DeleteManagerMaterialDeleteParams}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteManagerMaterialDelete>>, {params: DeleteManagerMaterialDeleteParams}> = (props) => {
          const {params} = props ?? {};

          return  deleteManagerMaterialDelete(params,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteManagerMaterialDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteManagerMaterialDelete>>>
    
    export type DeleteManagerMaterialDeleteMutationError = ErrorType<unknown>

    export const useDeleteManagerMaterialDelete = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteManagerMaterialDelete>>, TError,{params: DeleteManagerMaterialDeleteParams}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getDeleteManagerMaterialDeleteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * ÊâπÈáèÂà†Èô§ÂõæÁâá
 */
export const postManagerMaterialBatchDelete = (
    postManagerMaterialBatchDeleteBody: PostManagerMaterialBatchDeleteBody,
 options?: SecondParameter<typeof custom_instance>,) => {
      return custom_instance<PostManagerMaterialBatchDelete200>(
      {url: `/manager/material/batchDelete`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: postManagerMaterialBatchDeleteBody
    },
      options);
    }
  


export const getPostManagerMaterialBatchDeleteMutationOptions = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postManagerMaterialBatchDelete>>, TError,{data: PostManagerMaterialBatchDeleteBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
): UseMutationOptions<Awaited<ReturnType<typeof postManagerMaterialBatchDelete>>, TError,{data: PostManagerMaterialBatchDeleteBody}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postManagerMaterialBatchDelete>>, {data: PostManagerMaterialBatchDeleteBody}> = (props) => {
          const {data} = props ?? {};

          return  postManagerMaterialBatchDelete(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostManagerMaterialBatchDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof postManagerMaterialBatchDelete>>>
    export type PostManagerMaterialBatchDeleteMutationBody = PostManagerMaterialBatchDeleteBody
    export type PostManagerMaterialBatchDeleteMutationError = ErrorType<unknown>

    export const usePostManagerMaterialBatchDelete = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postManagerMaterialBatchDelete>>, TError,{data: PostManagerMaterialBatchDeleteBody}, TContext>, request?: SecondParameter<typeof custom_instance>}
) => {
    
      const mutationOptions = getPostManagerMaterialBatchDeleteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
