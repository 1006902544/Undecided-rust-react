/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * actic_web_app_project
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  AdminInfoRes,
  SignInRes,
  LoginBody,
  SignUpRes,
  SignUpReq
} from './schema'
import { custom_instance } from '../custom_instance';
import type { ErrorType } from '../custom_instance';



export const getAdminInfo = (

 signal?: AbortSignal
) => {
      return custom_instance<AdminInfoRes>(
      {url: `/admin/info`, method: 'get', signal
    },
      );
    }


export const getGetAdminInfoQueryKey = () => [`/admin/info`] as const;



export const getGetAdminInfoQueryOptions = <TData = Awaited<ReturnType<typeof getAdminInfo>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminInfo>>, TError, TData>, }
): UseQueryOptions<Awaited<ReturnType<typeof getAdminInfo>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminInfoQueryKey();



    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminInfo>>> = ({ signal }) => getAdminInfo(signal);



   return  { queryKey, queryFn, ...queryOptions}}

export type GetAdminInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminInfo>>>
export type GetAdminInfoQueryError = ErrorType<unknown>

export const useGetAdminInfo = <TData = Awaited<ReturnType<typeof getAdminInfo>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAdminInfo>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const signIn = (
    loginBody: LoginBody,
 ) => {
      return custom_instance<SignInRes>(
      {url: `/admin/signIn`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: loginBody
    },
      );
    }



export const getSignInMutationOptions = <TError = ErrorType<unknown>,

    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: LoginBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: LoginBody}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signIn>>, {data: LoginBody}> = (props) => {
          const {data} = props ?? {};

          return  signIn(data,)
        }




   return  { mutationFn, ...mutationOptions }}

    export type SignInMutationResult = NonNullable<Awaited<ReturnType<typeof signIn>>>
    export type SignInMutationBody = LoginBody
    export type SignInMutationError = ErrorType<unknown>

    export const useSignIn = <TError = ErrorType<unknown>,

    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: LoginBody}, TContext>, }
) => {

      const mutationOptions = getSignInMutationOptions(options);

      return useMutation(mutationOptions);
    }

export const signUp = (
    signUpReq: SignUpReq,
 ) => {
      return custom_instance<SignUpRes>(
      {url: `/admin/signUp`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: signUpReq
    },
      );
    }



export const getSignUpMutationOptions = <TError = ErrorType<unknown>,

    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpReq}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpReq}, TContext> => {
 const {mutation: mutationOptions} = options ?? {};




      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signUp>>, {data: SignUpReq}> = (props) => {
          const {data} = props ?? {};

          return  signUp(data,)
        }




   return  { mutationFn, ...mutationOptions }}

    export type SignUpMutationResult = NonNullable<Awaited<ReturnType<typeof signUp>>>
    export type SignUpMutationBody = SignUpReq
    export type SignUpMutationError = ErrorType<unknown>

    export const useSignUp = <TError = ErrorType<unknown>,

    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpReq}, TContext>, }
) => {

      const mutationOptions = getSignUpMutationOptions(options);

      return useMutation(mutationOptions);
    }

