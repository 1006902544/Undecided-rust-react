/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  ResponseRestfulResponse,
  CaptchaSendCaptchaReq,
  CaptchaVerifyCaptchaReq,
  GetApiUserSelf200,
  PostApiUserSignIn200,
  UserSignInReq,
  PostApiUserSignUp200,
  UserUserSignUpReq
} from './schema'
import { instance } from './instance'
import type { ErrorType } from './instance'


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary SendCaptchaToEmail
 */
export const postApiUserCaptchaSend = (
    captchaSendCaptchaReq: CaptchaSendCaptchaReq,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ResponseRestfulResponse>(
      {url: `/api/user/captcha/send`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: captchaSendCaptchaReq
    },
      options);
    }
  


    export type PostApiUserCaptchaSendMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserCaptchaSend>>>
    export type PostApiUserCaptchaSendMutationBody = CaptchaSendCaptchaReq
    export type PostApiUserCaptchaSendMutationError = ErrorType<unknown>

    export const usePostApiUserCaptchaSend = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserCaptchaSend>>, TError,{data: CaptchaSendCaptchaReq}, TContext>, request?: SecondParameter<typeof instance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserCaptchaSend>>, {data: CaptchaSendCaptchaReq}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserCaptchaSend(data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postApiUserCaptchaSend>>, TError, {data: CaptchaSendCaptchaReq}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary EmailVerify
 */
export const postApiUserCaptchaVerify = (
    captchaVerifyCaptchaReq: CaptchaVerifyCaptchaReq,
 options?: SecondParameter<typeof instance>,) => {
      return instance<ResponseRestfulResponse>(
      {url: `/api/user/captcha/verify`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: captchaVerifyCaptchaReq
    },
      options);
    }
  


    export type PostApiUserCaptchaVerifyMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserCaptchaVerify>>>
    export type PostApiUserCaptchaVerifyMutationBody = CaptchaVerifyCaptchaReq
    export type PostApiUserCaptchaVerifyMutationError = ErrorType<unknown>

    export const usePostApiUserCaptchaVerify = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserCaptchaVerify>>, TError,{data: CaptchaVerifyCaptchaReq}, TContext>, request?: SecondParameter<typeof instance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserCaptchaVerify>>, {data: CaptchaVerifyCaptchaReq}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserCaptchaVerify(data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postApiUserCaptchaVerify>>, TError, {data: CaptchaVerifyCaptchaReq}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary GetSelfInfo
 */
export const getApiUserSelf = (
    
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      return instance<GetApiUserSelf200>(
      {url: `/api/user/self`, method: 'get', signal
    },
      options);
    }
  

export const getGetApiUserSelfQueryKey = () => [`/api/user/self`];

    
export type GetApiUserSelfQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUserSelf>>>
export type GetApiUserSelfQueryError = ErrorType<unknown>

export const useGetApiUserSelf = <TData = Awaited<ReturnType<typeof getApiUserSelf>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiUserSelf>>, TError, TData>, request?: SecondParameter<typeof instance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUserSelfQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserSelf>>> = ({ signal }) => getApiUserSelf(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof getApiUserSelf>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


/**
 * @summary SignIn
 */
export const postApiUserSignIn = (
    userSignInReq: UserSignInReq,
 options?: SecondParameter<typeof instance>,) => {
      return instance<PostApiUserSignIn200>(
      {url: `/api/user/signIn`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: userSignInReq
    },
      options);
    }
  


    export type PostApiUserSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserSignIn>>>
    export type PostApiUserSignInMutationBody = UserSignInReq
    export type PostApiUserSignInMutationError = ErrorType<unknown>

    export const usePostApiUserSignIn = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserSignIn>>, TError,{data: UserSignInReq}, TContext>, request?: SecondParameter<typeof instance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserSignIn>>, {data: UserSignInReq}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserSignIn(data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postApiUserSignIn>>, TError, {data: UserSignInReq}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary SignUp
 */
export const postApiUserSignUp = (
    userUserSignUpReq: UserUserSignUpReq,
 options?: SecondParameter<typeof instance>,) => {
      return instance<PostApiUserSignUp200>(
      {url: `/api/user/signUp`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: userUserSignUpReq
    },
      options);
    }
  


    export type PostApiUserSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postApiUserSignUp>>>
    export type PostApiUserSignUpMutationBody = UserUserSignUpReq
    export type PostApiUserSignUpMutationError = ErrorType<unknown>

    export const usePostApiUserSignUp = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiUserSignUp>>, TError,{data: UserUserSignUpReq}, TContext>, request?: SecondParameter<typeof instance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiUserSignUp>>, {data: UserUserSignUpReq}> = (props) => {
          const {data} = props ?? {};

          return  postApiUserSignUp(data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postApiUserSignUp>>, TError, {data: UserUserSignUpReq}, TContext>(mutationFn, mutationOptions)
    }
    
